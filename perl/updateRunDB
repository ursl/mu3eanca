#! /usr/bin/perl

# ----------------------------------------------------------------------
# updateRunDB
# ===========
#           
# Usage:   cd .../mu3eanca/perl
#          ./updateRunDB
#
# Options:  -d     debug, nothing is updated
#           -n X   do at most X updates
#
# History 
#         2025/05/01 migration of path
#         2025/04/01 add -f 
#         2025/03/26 first shot
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the 
#
# Author    Urs Langenegger <urslangenegger@gmail.com>
# ----------------------------------------------------------------------

use Getopt::Std;
use File::Basename;

getopts('df:n:');


print "updateRunDB executed at ". localtime, "\n";

my $RDBURL = "http://pc11740/rdb/runrecords";
my $RUNLOGDIR = "/data1/run2025/message/runlogs";
my $RUNSDONE = "/home/ursl/mu3e/software/mu3eanca/runs.txt";

# -- read list of runs already done
open(IN,  "$RUNSDONE") || die "updateRunDB: Cannot open $RUNSDONE\n";
my @runsdone;
while(<IN>) {
    chop($_);
    push @runsdone, $_;
}
close(IN); 

# -- read runlog file(names)
opendir(RNLG, "$RUNLOGDIR") || die "Cannot read $RUNLOGDIR\n";
@filelist = sort(grep(/\.json$/,readdir(RNLG)));
@runsToDo = (); 
if ($opt_f && $opt_f == $d) {
    push @runsToDo, $d;
} else {
    my @stringd;
    my $goodFile; 
    foreach $d (@filelist) {
        #  print "->$d\n";
        if (grep(/$d/, @runsdone)) {
        } else {
            # -- check that this runlog is already complete
            @stringd = ();
            $goodFile = 0;     
            open(IND,  "$RUNLOGDIR/$d") || die "updateRunDB: Cannot open $RUNLOGDIR/$d\n";
            while(<IND>) {
                chop($_);
                push(@stringd, $_);
            }
            close(IND);
            $clos = pop(@stringd);
            if ((grep(/EOR/, @stringd)) && ($clos eq '}')) {
                $goodFile = 1;     
                print("found all for $d, will add to runsToDo\n");
            } elsif  ($clos =~ /\},/) {
                print("incomplete file for $d\n");
            } else {
                print("missing something else ->$clos<-\n");
                print("$stringd\n");
            }
            # print "  .. ->$d<- added to runsToDo\n";
            if ($goodFile == 1) {push @runsToDo, $d;}
        }
    }
}
closedir RNLG;

my $cnt = 0; 
foreach $d (@runsToDo) {
    print("updateRunDB for record ->$d<-\n");
    if ($opt_n && $cnt == $opt_n) {
        exit;
    }

    if ($opt_d) {
        print("dbx: curl -X PUT -H \"Content-Type: application/json\" --data-binary \@$RUNLOGDIR/$d $RDBURL\n");
    } else {
        my $tcnt = 0; 
        my $res = 1;
        while (($tcnt < 10) && ($res != 0)) {
            $res = `curl -X PUT -H \"Content-Type: application/json\" --data-binary \@$RUNLOGDIR/$d $RDBURL`;
            print("res ->$res<-\n");
            $tcnt++;
        }
        if ($res eq "Uh oh! An unexpected error occured.") {
            print("  transfer unsuccessful?!\n");
            system("cat $RUNLOGDIR/$d");
            print("end file\n");
        } elsif ($opt_f && $opt_f == $d) {
            print("  transfer successful!\n");
        } else {
            print("  transfer successful!\n");
            open(IN,  ">>$RUNSDONE") || die "updateRunDB: Cannot open $RUNSDONE for output\n";
            print IN "$d\n";
            close(IN);
        }
    }
    $cnt++;
}
