<!-- views/index.ejs -->

<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <title>Mu3e RDB <%=data.BOR["Run number"]%></title>
        <style>
         h1 {
             color: #00703c;
         }
         
         h2 {
             color: #507d2a;
         }
         
         div {
             padding-top: 20px;
             padding-right: 0px;
             padding-bottom: 10px;
             padding-left: 0px;
         }

         .button {
             background-color: #00703c; /* Green */
             border: none;
             color: white;
             padding: 5px 20px ;
             text-align: center;
             text-decoration: none;
             display: inline-block;
             font-size: 16px;
         }
        
         textarea {
             width: 100%; /* Make textarea fill the cell's width */
             height: 50px; /* You can adjust the height as needed */
             box-sizing: border-box; /* Ensure padding and borders are included in width */
         }
         
         #runs {
             font-family: Arial, Helvetica, sans-serif;
             border-collapse: collapse;
             width: 100%;
         }
         
         #runs td, #runs th {
             border: 1px solid #ddd;
             padding: 4px;
         }
         
         #runs tr:nth-child(even){background-color: #f2f2f2;}
         
         #runs tr:hover {background-color: #ddd;}
         
         #runs th {
             padding-top: 12px;
             padding-bottom: 12px;
             text-align: left;
             background-color: #00703c;
             color: white;
         }


         #histcomments {
             font-family: Arial, Helvetica, sans-serif;
             border-collapse: collapse;
             width: 100%;
         }
         
         #histcomments td, #histcomments th {
             border: 1px solid #ddd;
             padding: 4px;
         }
         
         #histcomments tr:nth-child(even){background-color: #f2f2f2;}
         
         #histcomments tr:hover {background-color: #ddd;}
         
         #histcomments th {
             padding-top: 12px;
             padding-bottom: 12px;
             text-align: left;
             background-color: #507d2a;
             color: white;
         }
       
        </style>
    </head>

    <body>
        <h1>Run
            <%=data.BOR["Run number"]%>
        </h1>

        <div>
            <input id="btnBack" type="button" class="button" value="Back" onclick=setBack() />
            <input id="btnPrev" type="button" class="button" value="Previous" onclick=setPrev() />
            <input id="btnNext" type="button" class="button" value="Next" onclick=setNext() />
            <input id="btnEdit" type="button" class="button" color="blue" value="Edit" onclick=setEdit() />
            <input id="btnSubm" type="button" class="button" value="Save" style="float: right; background-color:#93c572" onclick=updateRun() />
        </div>

        <div>
            <span id="riClass"></span>
        </div>

        <table id="runs">
            <thead>
                <tr>
                    <th id="runsCol1">Field </th>
                    <th id="runsCol2">Value </th>
                </tr>
            </thead>

            <tr>
                <td> Run number </td>
                <td>  <%= data.BOR["Run number"]%>  </td>
            </tr>

            <tr>
                <td> Start time </td>
                <td> <%= data.BOR["Start time"]%> </td>
            </tr>

            <tr>
                <td> Stop time </td>
                <td> <%= data.EOR["Stop time"]%> </td>
            </tr>

            <tr>
                <td> Events </td>
                <td> <%= data.EOR["Events"]%> </td>
            </tr>

            <tr>
                <td> Shift crew </td>
                <td> <%= data.BOR["Shift crew"]%> </td>
            </tr>

            <tr>
                <td> Shift comments </td>
                <td> <textarea id="comments" disabled="true"><%=data.EOR["Comments"]%></textarea><br>
                </td>
            </tr>

            <tr>
                <td> Subsystems </td>
                <td> <%= data.BOR["Subsystems"]%> </td>
            </tr>

            <tr>
                <td> Beam </td>
                <td> <%= data.BOR["Beam"]%> </td>
            </tr>

            <tr>
                <td> File size </td>
                <td> <%= data.EOR["File size"]%> </td>
            </tr>

            <tr>
                <td> Uncompressed data size </td>
                <td> <%= data.EOR["Uncompressed data size"]%> </td>
            </tr>

            <% if (data.hasOwnProperty('Attributes')) { %>
                <% if (data.hasOwnProperty('Attributes') && Array.isArray(data.Attributes) && data.Attributes.some(attr => attr.hasOwnProperty('RunInfo'))) { %>
                   <tr>
                        <td> RunInfo run-type class </td>
                        <td id="riClassCell"> <%= data.Attributes.find(attr => attr.hasOwnProperty('RunInfo')).RunInfo.Class %> </td>
                    </tr>
                    <tr>
                        <td> RunInfo comments </td>
                        <td id="riCommentsCell"> <textarea disabled="true"><%= data.Attributes.filter(attr => attr.hasOwnProperty('RunInfo')).slice(-1)[0].RunInfo.Comments %></textarea><br>
                    </tr>
                    <tr>
                        <td> RunInfo junk </td>
                        <td id="riJunkCell"> <%= data.Attributes.filter(attr => attr.hasOwnProperty('RunInfo')).slice(-1)[0].RunInfo.Junk %> </td>
                    </tr>
                <% } %>
            <% } %>    

            <% if (data.hasOwnProperty('Attributes')) { %>
                <% if (data.hasOwnProperty('Attributes') && Array.isArray(data.Attributes) && data.Attributes.some(attr => attr.hasOwnProperty('DataQuality'))) { %>
                <tr>
                    <td> Data Quality Summary </td>
                    <td>
                        <input type="checkbox" id="dqMu3e" name="dqMu3e" indeterminate disabled/> <label for="dqMu3e">Mu3e</label>
                        <input type="checkbox" id="dqBeam" name="dqBeam" indeterminate disabled/> <label for="dqBeam">Beam</label>
                        <input type="checkbox" id="dqVtx" name="dqVtx" indeterminate disabled/> <label for="dqVtx">Vertex</label>
                        <input type="checkbox" id="dqPix" name="dqPix" indeterminate disabled/> <label for="dqPix">Pixel</label>
                        <input type="checkbox" id="dqFib" name="dqFib" indeterminate disabled/> <label for="dqFib">Fibres</label>
                        <input type="checkbox" id="dqTil" name="dqTil" indeterminate disabled/> <label for="dqTil">Tiles</label>
                        <input type="checkbox" id="dqCal" name="dqCal" indeterminate disabled/> <label for="dqCal">Calibration</label>
                        <input type="checkbox" id="dqLks" name="dqLks" indeterminate disabled/> <label for="dqLks">Links</label>
                    </td>
                </tr>
                <% } %>
            <% } %>

        </table>
        
        <h2>Record history</h2>
        <table  id="histcomments">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Comment</th>
                </tr>
            </thead>
            <tbody>
                <% data.History.forEach(function(entry) { %>
                    <tr>
                        <td><%= entry.date %></td>
                        <td><%= entry.comment %></td>
                    </tr>
                <% }); %>
            </tbody>
        </table>    
    </body>

    <script>
     const lData = <%- JSON.stringify(data) %>;
     console.log(lData);
     
     let sruns = '<%-runs%>';
     let aruns = sruns.split(",");
     const sthisRun = <%= data.BOR["Run number"]%>;
     const thisRun = String(sthisRun);
     const idxThisRun = aruns.indexOf(thisRun);
     let idxPrevRun = (idxThisRun > 0? idxThisRun - 1: -1);
     let idxNextRun = (idxThisRun < aruns.length? idxThisRun + 1: -1);
     console.log("idxThisRun / idxPrevRun / idxnextRun :" + idxThisRun + " / " + idxPrevRun + " / " + idxNextRun);
     
     let mycolors = [];
     mycolors.push('#1450fa'); // blue
     mycolors.push('#0ac80a'); // darker green
     mycolors.push('#50f000'); // light green
     mycolors.push('#f0f000'); // yellow
     mycolors.push('#f05000'); // orange
     mycolors.push('#f00000'); // red

     // -- all the dq flags to be shown
     const detMap = new Map([
         ["mu3e", "dqMu3e"], 
         ["beam", "dqBeam"], 
         ["vertex", "dqVtx"], 
         ["pixel", "dqPix"],
         ["fibres", "dqFib"], 
         ["tiles", "dqTil"], 
         ["calibration", "dqCal"], 
         ["goodLinks", "dqLks"] //,
         //["version", "dqVer"]        
     ]);

     var dqOrigIdx = -1; 
     const dqOrig = new Map([
         ["mu3e", "nada"], 
         ["beam", "nada"], 
         ["vertex", "nada"], 
         ["pixel", "nada"], 
         ["fibres", "nada"], 
         ["tiles", "nada"],
         ["calibration", "nada"], 
         ["goodLinks", "nada"]//, 
         //["version", "nada"]
     ]);


     let commentChange = 0; 
     
     let dataQuality = 0;
     var dqIdx = -1;
     var riIdx = -1;

     const hasAttributes = lData.hasOwnProperty('Attributes');

     console.log("hasAttributes: " + hasAttributes + " lData.Attributes.length: " + lData.Attributes.length);
     // -- get most recent (last) DataQuality
     if (hasAttributes) {
         for (var idx = 0; idx < lData.Attributes.length; ++idx) {
             if (lData.Attributes[idx].hasOwnProperty('DataQuality')) {
                console.log("DataQuality found");
                dqIdx = idx; 
             }
             if (lData.Attributes[idx].hasOwnProperty('RunInfo')) {
                 console.log("RunInfo found");
                 riIdx = idx; 
             }
         }
     }
     
     if (riIdx > -1) {
         console.log("riIdx: " + riIdx);
         var onlineruninfo = lData.Attributes[riIdx].RunInfo;
         console.log("onlineruninfo: " + JSON.stringify(onlineruninfo));
         if (onlineruninfo.hasOwnProperty('Class')) {
             document.getElementById('riClassCell').textContent = onlineruninfo.Class;
         }
         if (onlineruninfo.hasOwnProperty('Junk')) {
             document.getElementById('riJunkCell').textContent = onlineruninfo.Junk;
         }
         if (onlineruninfo.hasOwnProperty('Comments')) {
             document.getElementById('riCommentsCell').textContent = onlineruninfo.Comments;
         }
    }
    
     if (dqIdx > -1) {
         dataQuality = 1; 
         console.log("dqIdx: " + dqIdx);
         var onlinedq = lData.Attributes[dqIdx].DataQuality;
         dqOrigIdx = dqIdx;
         console.log("dqOrigIdx:" + dqOrigIdx); 
         
         for (var prop in onlinedq) {
                 if (Object.prototype.hasOwnProperty.call(onlinedq, prop)) {
                 console.log("prop: " + prop + " -> val: " + onlinedq[prop]);
                 if (detMap.has(prop)) {
                     if (onlinedq[prop] === '1') {
                         console.log("prop " + prop + " good");
                         document.getElementById(detMap.get(prop)).checked = true;
                         dqOrig.set(prop, "1");
                     } else if (onlinedq[prop] === '0') {
                         console.log("prop " + prop + " bad");
                         document.getElementById(detMap.get(prop)).checked = false;
                         dqOrig.set(prop, "0");
                     } else {
                         console.log("prop " + prop + " unset");
                         document.getElementById(detMap.get(prop)).indeterminate = true;
                         dqOrig.set(prop, "-1");
                     }
                 }
             }

         }
     } else {
         if (hasAttributes) {
             console.log("Set attributes to indeterminate");
             for (const value of detMap.values()) {
                 console.log(value);
                 document.getElementById(value).indeterminate = true;
             }
         } else {
             console.log("do nothing as this runrecord has no Attributes");
         }
     }
     
     let doEdit = -1;

     function setNext() {
         if (idxNextRun < aruns.length) {
             window.location.href = '/rdb/run/' + aruns[idxNextRun] + '/?runs=' + sruns;
         } else {
             window.location.href = '/rdb/';
         }
     }

     function setPrev() {
         if (idxPrevRun > -1) {
             window.location.href = '/rdb/run/' + aruns[idxPrevRun] + '/?runs=' + sruns;
         } else {
             window.location.href = '/rdb/';
         }
     }

     function setBack() {
         window.location.href = '/rdb/';
     }

     function setEdit() {
         console.log("HALLO setEdit");
         if (doEdit < 1) {
             document.getElementById('comments').disabled = false;
             document.getElementById('riComments').disabled = false; 
             document.getElementById('btnSubm').style = "float: right; background-color:#00703c";
             
             if (hasAttributes) {
                 for (const [key, value] of detMap) {
                     console.log("key: " + key + " unsetting disabled: " + value);
                     document.getElementById(value).disabled = false;
                 }

                 for (const [key, value] of dqOrig) {
                     console.log("original key: " + key + " : " + value);
                 }
             }
             
             doEdit = 1; 
         } 
     }

     function unsetEdit() {
         if (doEdit > 0) {
             document.getElementById('comments').disabled = true;
             document.getElementById('btnSubm').style = "float: right; background-color:#93c572";
             
             if (hasAttributes) {
                 for (const [key, value] of detMap) {
                     console.log("key: " + key + " unsetting disabled: " + value);
                     document.getElementById(value).disabled = true;
                 }
                 
                 for (const [key, value] of dqOrig) {
                     console.log("original key: " + key + " : " + value);
                 }
             }
             
             doEdit = 0; 
         } 
     }

     function updateRun() {
         console.log("HALLO");
         if (doEdit < 1) {
             alert("Nothing edited. Will not save.\nClick Edit button to allow editing.");
             return;
         } 

         var ldata = <%- JSON.stringify(data) %>;
         
         // -- update the modified comment
         ldata.EOR["Comments"] = document.getElementById('comments').value;
         console.log("ldata.History = " + JSON.stringify(ldata.History));

         // -- check for updated dq summary
         var newdq = {
             DataQuality : {
                 mu3e: "-2",
                 beam: "-2",
                 vertex: "-2",
                 pixel: "-2",
                 fibres: "-2",
                 tiles: "-2", 
                 calibration: "-2",
                 goodLinks: "-2",
                 version: "unset-2"
             }
         };

         var dqChange = "";
         var dqChanged = 0; 
         if (dqOrigIdx > -1) {
             dqChange = "dq status changes: "; 
             for (const [key, value] of detMap) {
                 var status = "-3";
                 if (document.getElementById(value).indeterminate) {
                     status = "-1";
                 } else if (document.getElementById(value).checked) {
                     status = "1";
                 } else {
                     status = "0";
                 }
                 if (status != dqOrig.get(key)) {
                     dqChange = dqChange + key + ": " + status + " ";
                     dqChanged = 1; 
                     newdq.DataQuality[key] = status;
                     console.log("key: " + key);
                     console.log("dqOrigIdx: " + dqOrigIdx);
                     console.log("attributes[dqOrigIdx]: " + JSON.stringify(lData.Attributes[dqOrigIdx]));
                     console.log("changed " + lData.Attributes[dqOrigIdx].DataQuality[key]);
                 } else {
                     newdq.DataQuality[key] = dqOrig.get(key);
                 }
             }
         }
         
         var currentdate = new Date(); 
         var datetime = currentdate.getFullYear() + "/" 
                      + (currentdate.getMonth()+1).toString().padStart(2, '0')  + "/" 
                      + currentdate.getDate().toString().padStart(2, '0') + " "
                      + currentdate.getHours().toString().padStart(2, '0') + ":"  
                      + currentdate.getMinutes().toString().padStart(2, '0') + ":" 
                      + currentdate.getSeconds().toString().padStart(2, '0');
         
         let addComment = {"date": datetime, "comment": ""};

         if (commentChange) {
             addComment.comment = "Comment changed. ";
         }
         if (dqChanged) {
             addComment.comment = addComment.comment + dqChange;
         }
         

         if (dqChanged > 0) { 
             ldata.Attributes.push(newdq);
         }
         ldata.History.push(addComment);
         
         console.log("ldata: " + JSON.stringify(ldata));
         
         // -- Send the POST request
         fetch('/rdb/updateRun', {
             method: 'POST',
             headers: {
                 'Content-Type': 'application/json',
             },
             body: JSON.stringify(ldata)  // Send data as JSON
         })

         // -- reset color of Save button
         unsetEdit();
         location.reload();
     }

     document.querySelector('textarea').addEventListener('change', function (event) {
         commentChange = 1; 
     });
    </script>

    
</html>
