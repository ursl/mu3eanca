<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Mu3e Run Database</title>
    <style>
    body {
        margin: 0;
        padding: 0;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    h1 {
        color: green;
        margin-bottom: 20px;
    }

    .header-section {
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 0;
        margin-bottom: 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        z-index: 1000;
    }

    .content-section {
        flex: 1;
        padding: 0 20px;
        margin-top: 200px;
        margin-bottom: 20px;
        position: relative;
    }

    .filter-section {
        display: flex;
        flex-direction: column;
        gap: 12px;
        margin-bottom: 15px;
        background-color: white;
        padding: 10px;
        border-radius: 6px;
        border: 1px solid #dee2e6;
    }

    .filter-row {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
        align-items: center;
    }

    .filter-group {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 6px 10px;
        border-radius: 4px;
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
    }

    .filter-group.significant {
        background-color: #e8f5e9;
        border-color: #c8e6c9;
    }

    .filter-group label {
        white-space: nowrap;
        font-size: 13px;
        color: #495057;
        font-weight: 500;
    }

    .filter-group input[type="numeric"],
    .filter-group input[type="text"],
    .filter-group select {
        min-width: 120px;
        padding: 4px 8px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 13px;
    }

    .filter-group input[type="numeric"] {
        width: 80px;
    }

    .filter-group.run-range input[type="numeric"] {
        width: 70px;
    }

    .button {
        background-color: #04AA6D;
        border: none;
        color: white;
        padding: 6px 14px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 13px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s;
        font-weight: 500;
    }

    .button:hover {
        background-color: #038857;
    }

    input[type="numeric"], input[type="text"] {
        padding: 6px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 14px;
    }

    .status-text {
        font-size: 14px;
        color: #666;
        margin-top: 10px;
    }

    .status-significant {
        color: #2e7d32;
        font-weight: bold;
    }

    .status-not-significant {
        color: #c62828;
        font-weight: bold;
    }

    .status-unset {
        color: #757575;
        font-style: italic;
    }

    .table-container {
        display: flex;
        flex-direction: column;
        border: 1px solid #ddd;
        border-radius: 4px;
        background: white;
        height: calc(100vh - 250px);
    }

    .table-header {
        background: #04AA6D;
        color: white;
        padding: 0;
        border-bottom: 2px solid #ddd;
    }

    .table-header table {
        width: 100%;
        border-collapse: collapse;
    }

    .table-header th {
        padding: 12px 8px;
        text-align: left;
        border: 1px solid #ddd;
        background: #04AA6D;
        color: white;
    }

    .table-body {
        flex: 1;
        overflow: auto;
    }

    .table-body table {
        width: 100%;
        border-collapse: collapse;
        background: white;
    }

    .table-body td {
        padding: 8px;
        border: 1px solid #ddd;
    }

    .table-body tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .table-body tr:hover {
        background-color: #ddd;
    }

    /* Collapsible CSV box styles */
    .csv-box {
        margin-top: 20px;
        border: 1px solid #ddd;
        border-radius: 4px;
        background: white;
    }

    .csv-header {
        background: #04AA6D;
        color: white;
        padding: 10px 15px;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        user-select: none;
    }

    .csv-header:hover {
        background: #038857;
    }

    .csv-content {
        padding: 15px;
        display: none;
        font-family: monospace;
        white-space: pre-wrap;
        word-break: break-all;
        background: #f8f9fa;
        border-top: 1px solid #ddd;
    }

    .csv-content.expanded {
        display: block;
    }

    .toggle-icon {
        transition: transform 0.3s ease;
    }

    .toggle-icon.expanded {
        transform: rotate(180deg);
    }

    /* Column widths - applied to both header and body */
    .table-header th:nth-child(1), .table-body td:nth-child(1) { width: 3%; }  /* Select */
    .table-header th:nth-child(2), .table-body td:nth-child(2) { width: 5%; }  /* Run */
    .table-header th:nth-child(3), .table-body td:nth-child(3) { width: 13%; }  /* Start time */
    .table-header th:nth-child(4), .table-body td:nth-child(4) { width: 13%; }  /* End time */
    .table-header th:nth-child(5), .table-body td:nth-child(5) { width: 2%; }   /* Sig */
    .table-header th:nth-child(6), .table-body td:nth-child(6) { width: 5%; }  /* Class */
    .table-header th:nth-child(7), .table-body td:nth-child(7) { width: 5%; }  /* Events */
    .table-header th:nth-child(8), .table-body td:nth-child(8) { width: 12%; }  /* Shift crew */
    .table-header th:nth-child(9), .table-body td:nth-child(9) { width: 35%; }  /* Comments */
    .table-header th:nth-child(10), .table-body td:nth-child(10) { width: 10%; }  /* PDF */

    /* Bulk action styles */
    .bulk-actions {
        background: #f8f9fa;
        padding: 15px;
        margin-bottom: 15px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        display: none;
    }

    .bulk-actions.visible {
        display: block;
    }

    .bulk-actions .action-group {
        display: flex;
        gap: 15px;
        align-items: center;
        margin-bottom: 10px;
    }

    .bulk-actions .action-group:last-child {
        margin-bottom: 0;
    }

    .bulk-actions select,
    .bulk-actions input[type="text"] {
        padding: 6px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 14px;
    }

    .bulk-actions .button {
        margin-left: 10px;
    }

    .bulk-actions .status {
        margin-left: 15px;
        font-size: 14px;
        color: #666;
    }

    .bulk-actions .status.success {
        color: #2e7d32;
    }

    .bulk-actions .status.error {
        color: #c62828;
    }
</style>

<script>
let isFiltered = true;
let onlySignificant = "yes";
let isOnlySignificant = true;
let NMAXRUNS = 1000;

// Initialize checkbox state on page load
window.onload = function() {
    const urlParams = new URLSearchParams(window.location.search);
    const significantParam = urlParams.get('onlySignificant');
    const checkbox = document.getElementById("filterSignificant");
    if (checkbox) {
        checkbox.checked = significantParam === null ? true : significantParam === "yes";
        onlySignificant = significantParam === null ? "yes" : significantParam;
        isOnlySignificant = checkbox.checked;
    }

    // Set initial values from URL parameters
    document.getElementById("filterRunLimit").value = urlParams.get('nRun') || '';
    document.getElementById("filterRunMin").value = urlParams.get('minRun') || '';
    document.getElementById("filterRunMax").value = urlParams.get('maxRun') || '';
    document.getElementById("filterComment").value = urlParams.get('comment') || '';
    document.getElementById("filterRunClass").value = urlParams.get('runClass') || '';

    // Add event listener for Enter key on the filter form
    document.getElementById("filterForm").addEventListener("keypress", function(event) {
        if (event.key === "Enter") {
            event.preventDefault();
            applyFilters();
        }
    });

    // Initialize CSV box toggle
    const csvHeader = document.querySelector('.csv-header');
    const csvContent = document.querySelector('.csv-content');
    const toggleIcon = document.querySelector('.toggle-icon');
    
    if (csvHeader && csvContent) {
        csvHeader.addEventListener('click', () => {
            csvContent.classList.toggle('expanded');
            toggleIcon.classList.toggle('expanded');
        });
    }
}

function applyFilters() {
    isFiltered = true;
    const urlParams = new URLSearchParams();
    
    // Always include onlySignificant parameter
    urlParams.set('onlySignificant', onlySignificant);

    // Get all filter values
    const nRun = document.getElementById("filterRunLimit").value;
    const minRun = document.getElementById("filterRunMin").value;
    const maxRun = document.getElementById("filterRunMax").value;
    const comment = document.getElementById("filterComment").value;
    const runClass = document.getElementById("filterRunClass").value;

    // Only add parameters that have values
    if (nRun) urlParams.set('nRun', nRun);
    if (minRun) urlParams.set('minRun', minRun);
    if (maxRun) urlParams.set('maxRun', maxRun);
    if (comment) urlParams.set('comment', comment);
    if (runClass) urlParams.set('runClass', runClass);

    // Navigate to the new URL with all active filters
    window.location.href = '/rdb/?' + urlParams.toString();
}

function significantFilter() {
    const checkbox = document.getElementById("filterSignificant");
    onlySignificant = checkbox.checked ? "yes" : "no";
    isOnlySignificant = checkbox.checked;
    applyFilters();
}

let selectedRuns = new Set();

function toggleAllRuns(checkbox) {
    const runCheckboxes = document.querySelectorAll('.run-select');
    runCheckboxes.forEach(cb => {
        cb.checked = checkbox.checked;
        const runNumber = cb.getAttribute('data-run');
        if (checkbox.checked) {
            selectedRuns.add(runNumber);
        } else {
            selectedRuns.delete(runNumber);
        }
    });
    updateBulkActionsVisibility();
}

function toggleRun(checkbox) {
    const runNumber = checkbox.getAttribute('data-run');
    if (checkbox.checked) {
        selectedRuns.add(runNumber);
    } else {
        selectedRuns.delete(runNumber);
    }
    updateBulkActionsVisibility();
}

function updateBulkActionsVisibility() {
    const bulkActions = document.querySelector('.bulk-actions');
    if (selectedRuns.size > 0) {
        bulkActions.classList.add('visible');
    } else {
        bulkActions.classList.remove('visible');
    }
}

async function performBulkAction(action) {
    const runs = Array.from(selectedRuns);
    if (runs.length === 0) return;

    const statusElement = document.querySelector('.bulk-actions .status');
    statusElement.textContent = 'Processing...';
    statusElement.className = 'status';

    try {
        let endpoint = '';
        let payload = { runs };

        switch (action) {
            case 'significant':
                const significant = document.getElementById('bulkSignificant').value;
                endpoint = '/rdb/bulk/significant';
                payload.value = significant === 'true';
                break;
            case 'comments':
                const comments = document.getElementById('bulkComments').value;
                endpoint = '/rdb/bulk/comments';
                payload.comments = comments;
                break;
            case 'class':
                const runClass = document.getElementById('bulkClass').value;
                endpoint = '/rdb/bulk/class';
                payload.class = runClass;
                break;
        }

        const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
        });

        if (!response.ok) throw new Error('Server error');

        const result = await response.json();
        statusElement.textContent = `Successfully updated ${result.updated} runs`;
        statusElement.className = 'status success';

        // Refresh the page after 1.5 seconds to show updated data
        setTimeout(() => window.location.reload(), 1500);
    } catch (error) {
        statusElement.textContent = `Error: ${error.message}`;
        statusElement.className = 'status error';
    }
}
</script>
</head>

<% var runList = [] %>
<% for(const testData of data){ %>
<% runList.push(testData.BOR["Run number"]) %>
<% } %>


<body>
    <div id="runData" data-run='<%- JSON.stringify(data) %>' style="display: none;"></div>
    <div class="header-section">
        <h1><a href="/rdb/" style="text-decoration: none; color: inherit;">Mu3e Run Database</a></h1>
        
        <form id="filterForm" class="filter-section">
            <div class="filter-row">
                <div class="filter-group significant">
                    <label for="filterSignificant">Significant Runs only</label>
                    <input id="filterSignificant" type="checkbox" 
                        <% if (locals.onlySignificant === "yes") { %>checked<% } %>
                        onchange="significantFilter()" />
                </div>

                <div class="filter-group">
                    <label for="filterRunClass">Run class</label>
                    <select id="filterRunClass">
                        <option value="">All classes</option>
                        <option value="Beam" <% if (locals.runClass === 'Beam') { %>selected<% } %>>Beam</option>
                        <option value="Cosmic" <% if (locals.runClass === 'Cosmic') { %>selected<% } %>>Cosmic</option>
                        <option value="Source" <% if (locals.runClass === 'Source') { %>selected<% } %>>Source</option>
                        <option value="Calibration" <% if (locals.runClass === 'Calibration') { %>selected<% } %>>Calibration</option>
                        <option value="Test" <% if (locals.runClass === 'Test') { %>selected<% } %>>Test</option>
                        <option value="Junk" <% if (locals.runClass === 'Junk') { %>selected<% } %>>Junk</option>
                    </select>
                </div>

                <div class="filter-group run-range">
                    <label for="filterRunMin">Run range</label>
                    <input id="filterRunMin" type="numeric" placeholder="min" />
                    <input id="filterRunMax" type="numeric" placeholder="max" />
                </div>

                <div class="filter-group">
                    <label for="filterRunLimit">Max runs</label>
                    <input id="filterRunLimit" type="numeric" placeholder="limit" />
                </div>

                <div class="filter-group" style="flex-grow: 1;">
                    <label for="filterComment">Search comments</label>
                    <input id="filterComment" type="text" placeholder="search in comments" value="<%= locals.comment || '' %>" style="width: 100%;" />
                </div>

                <div class="filter-group">
                    <input type="button" class="button" value="Apply Filters" onclick="applyFilters()" />
                </div>
            </div>
        </form>

        <div class="status-text">
            <% if (isFiltered) { %>
                Showing filtered results
                <% if (locals.onlySignificant === "yes") { %>
                    (significant runs only)
                <% } %>
            <% } else { %>
                Showing the last <%=data.length %> runs
                <% if (locals.onlySignificant === "yes") { %>
                    (significant runs only)
                <% } %>
            <% } %>
        </div>
        
    </div>

    <div class="content-section">
        <div class="bulk-actions">
            <div class="action-group">
                <label>Set Significant:</label>
                <select id="bulkSignificant">
                    <option value="true">Significant</option>
                    <option value="false">Not Significant</option>
                </select>
                <button class="button" onclick="performBulkAction('significant')">Apply</button>
            </div>
            <div class="action-group">
                <label>Add Comments:</label>
                <input type="text" id="bulkComments" placeholder="Enter comments to add" style="width: 300px;">
                <button class="button" onclick="performBulkAction('comments')">Apply</button>
            </div>
            <div class="action-group">
                <label>Set Class:</label>
                <select id="bulkClass">
                    <option value="Beam">Beam</option>
                    <option value="Test">Test</option>
                    <option value="Calibration">Calibration</option>
                    <option value="Source">Source</option>
                    <option value="Junk">Junk</option>
                </select>
                <button class="button" onclick="performBulkAction('class')">Apply</button>
            </div>
            <div class="status"></div>
        </div>

        <div class="table-container">
            <div class="table-header">
                <table>
                    <tr>
                        <th><input type="checkbox" onchange="toggleAllRuns(this)"></th>
                        <th>Run</th>
                        <th>Start time</th>
                        <th>End time</th>
                        <th>Sig.</th>
                        <th>Class</th>
                        <th>Events</th>
                        <th>Shift crew</th>
                        <th>Shift Comments/RunInfo Comments</th>
                        <th>Resources</th>
                    </tr>
                </table>
            </div>
            <div class="table-body">
                <table>
                    <tbody>
                        <% data.map((result) => { %>
                            <tr>
                                <td><input type="checkbox" class="run-select" data-run="<%= result.BOR["Run number"] %>" onchange="toggleRun(this)"></td>
                                <td><a href="/rdb/run/<%= result.BOR["Run number"] %>"><%= result.BOR["Run number"] %></a></td>
                                <td><%= result.BOR["Start time"] %></td>
                                <td><%= result.EOR["Stop time"] %></td>
                                <% if (result.Attributes && result.Attributes.length > 0) { %>
                                    <% const lastRunInfo = result.Attributes.filter(attr => attr.RunInfo).pop(); %>
                                    <% if (lastRunInfo) { %>
                                        <td>
                                            <% if (lastRunInfo.RunInfo.Significant === "true") { %>
                                                <span class="status-significant">✓</span>
                                            <% } else if (lastRunInfo.RunInfo.Significant === "false") { %>
                                                <span class="status-not-significant">✗</span>
                                            <% } else { %>
                                                <span class="status-unset">n/a</span>
                                            <% } %>
                                        </td>
                                        <td><%= result.BOR["Run Class"] || 'n/a' %></td>
                                        <td><%= result.EOR["Events"] %></td>
                                        <td><%= result.BOR["Shift crew"] %></td>
                                        <td>
                                            <%= result.EOR["Comments"] %>
                                            <% if (lastRunInfo.RunInfo.Comments && lastRunInfo.RunInfo.Comments !== "unset") { %>
                                                /<%= lastRunInfo.RunInfo.Comments %>
                                            <% } %>
                                        </td>
                                    <% } else { %>
                                        <td><span class="status-unset">N/A</span></td>
                                        <td>n/a</td>
                                        <td><%= result.EOR["Events"] %></td>
                                        <td><%= result.BOR["Shift crew"] %></td>
                                        <td><%= result.EOR["Comments"] %></td>
                                    <% } %>
                                <% } else { %>
                                    <td>-</td>
                                    <td>n/a</td>
                                    <td><%= result.EOR["Events"] %></td>
                                    <td><%= result.BOR["Shift crew"] %></td>
                                    <td><%= result.EOR["Comments"] %></td>
                                <% } %>
                                <td>
                                    <% if (result.Resources && result.Resources.length > 0) { %>
                                        <% 
                                            // Flexible PDF check: type contains 'pdf' (case-insensitive)
                                            const pdfResources = result.Resources.filter(r => r.type && r.type.toLowerCase().includes('pdf'));
                                            const nonPdfResources = result.Resources.filter(r => !(r.type && r.type.toLowerCase().includes('pdf')));
                                            // Group PDF resources by description and get latest version of each type
                                            const resourcesByType = pdfResources
                                                .reduce((acc, resource) => {
                                                    const desc = resource.description || 'No description';
                                                    if (!acc[desc] || new Date(resource.uploadDate) > new Date(acc[desc].uploadDate)) {
                                                        acc[desc] = resource;
                                                    }
                                                    return acc;
                                                }, {});
                                            // Convert to array and sort by description
                                            const latestResources = Object.values(resourcesByType)
                                                .sort((a, b) => (a.description || '').localeCompare(b.description || ''));
                                        %>
                                        <% latestResources.forEach((resource, index) => { %>
                                            <% const resourceIndex = result.Resources.indexOf(resource); %>
                                            <a href="/rdb/resource/<%= result.BOR["Run number"] %>/<%= resourceIndex %>" 
                                               target="_blank" 
                                               title="<%= resource.filename %>"><%= resource.description || 'No description' %></a><% if (index < latestResources.length - 1) { %>, <% } %>
                                        <% }); %>
                                        <% if (nonPdfResources.length > 0) { %> <span style="color: #666; font-style: italic;">(more)</span><% } %>
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
        </div>

        <div class="csv-box">
            <div class="csv-header">
                <span>Run Numbers (CSV)</span>
                <span class="toggle-icon">▼</span>
            </div>
            <div class="csv-content">
                <% 
                    const runNumbers = data
                        .map(result => result.BOR["Run number"])
                        .sort((a, b) => b - a)
                        .join(',');
                %>
                <%= runNumbers %>
            </div>
        </div>

        <div style="
            margin-top: 30px;
            padding: 15px;
            text-align: center;
            color: #666;
            font-size: 13px;
            border-top: 1px solid #eee;
        ">
            Built with <a href="https://cursor.sh" target="_blank" style="
                color: #04AA6D;
                text-decoration: none;
                font-weight: 500;
            ">Cursor</a>
        </div>
    </div>
</body>

</html>
