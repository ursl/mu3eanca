#! /usr/bin/perl
 
# ----------------------------------------------------------------------
# processRuns
# ===========
#
# Usage:       cd mu3eanca/run2025/scripts
#              ./processRuns -m minalyzer -c /Users/ursl/mu3e/mu3eanca/db0/cdb2/certification/2025/
#              ./processRuns -m minalyzer -e "2025April"
#              ./processRuns -m minalyzer -e runs -r "553,552,551"
#
#              ./processRuns -m calibration -e 2025April -g datav6.1=2025CosmicsVtxOnly 
#              ./processRuns -m calibration -e runs -r "553" -g datav6.1=2025CosmicsVtxOnly 
#              ./processRuns -m calibration -e 2025April -g datav6.1=2025CosmicsVtxOnly -u
#              ./processRuns -m calibration -c ../../db0/cdb2/certification/2025/2025-Cage-v1-significant-tkar-cosmic.runs -g datav6.1=2025CosmicsVtxOnly -u
#
# History
#         2025/06/04 many small fixes for merging to work. GT passed into slurm-analyzer.csh
#         2025/06/03 change countEvents to use to RDB
#         2025/05/28 complete rearrangement of loop/logic, merge in code from proCalRec
#         2025/05/26 remove leading whitespace when reading from certification file
#         2025/05/05 add -u option to update CDB tag IOV list
#         2025/05/03 add GT for pixelqualitylm payload generation
#         2025/04/30 first shot
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the
#
# Author    Urs Langenegger <urslangenegger@gmail.com>
# ----------------------------------------------------------------------
use Cwd;
use File::Basename;
use Env;
 
my $dir = getcwd;
 
use Getopt::Std;
getopts('dc:e:g:m:n:r:t:u');
 
# ----------------------------------------------------------------------
# -- default values
# ----------------------------------------------------------------------
my $HOME     = $ENV{"HOME"};
# -- Base directory with mu3e and minalyzer installations
my $BASEDIR  = "$HOME/mu3e/software/250429";
# -- Base directory for mu3eanca
my $MU3EANCA = "$HOME/mu3e/mu3eanca/run2025";
# -- Base GT for running minalyzer
my $BASEGT   = "mcidealv6.1";
# -- Data directory
my $DATADIR  = "$HOME/mu3e/data/run2025";
# -- CDB directory (not the mirror of the master CDB!)
my $CDB      = "$HOME/mu3e/cdb";
# -- ROOT output directory
my $ROF      = "$BASEDIR/mlzr/root_output_files/";
# -- Maximum number of runs to process
my $MAXRUN   = -1;
# -- GT for updating payloads and tag insertion
my $GT       = "mcidealv6.1";
# -- Minimum number of events to process a run
my $MINEVENTS= 10000;

# -- modifications for merlin
if (%ENV{"HOST"} =~ "merlin") {
    $BASEDIR  = "/data/experiment/mu3e/code/offline/250528-v6.1pre";
    $MU3EANCA = "/psi/home/langenegger/mu3e/mu3eanca";
    $CDB      = "/data/experiment/mu3e/code/cdb";
    $DATADIR  = "/data/experiment/mu3e/data/2025";
    $ROF      = "/data/experiment/mu3e/data/2025/mlzr";
}

# -- tarfile
#    create it with
#      merlin-l-002>pwd
#      /data/experiment/mu3e/code/offline/250528-v6.1pre
#      merlin-l-002>tar zhcvf ~/data/mdc2023/slurm/230913-analyzer.tar.gz --exclude .git analyzer mu3e

my $tarFile   = "unset.tar.gz";
if ($opt_t) {
    my($barefile, $directories) = fileparse($opt_t);
    $tarFile = $barefile;
}

if ($tarFile eq "unset.tar.gz") {
    die("A tar file MUST be specified!\n");
}

my $nevts = 1000000;
if ($opt_n) {
    $nevts = $opt_n;
}
print(&prefix("processRuns"), "nevts: $nevts\n");


# -- event counting executable 
my $counterExe= "mdump -j -x ";

if ($opt_g) {
    $GT = "$opt_g";
}

# -- define which runs to process
my @goodRuns = ();
&setGoodRuns();


# ----------------------------------------------------------------------
# -- main loop and decision point is here
# ----------------------------------------------------------------------
# -- count events for all runs
my $nrun = 0;
foreach my $run (@goodRuns) {
    $nrun++;
    if ($MAXRUN > 0 && $nrun > $MAXRUN) {
        print(&prefix("processRuns"), "Skipping run $run, as too many runs processed\n");
        next;
    }

    my $nEvents = &countEvents($run);
    if ($nEvents < $MINEVENTS) {
        print(&prefix("processRuns"), "Skipping run $run, as too few events\n");
        next;
    }
    if ($opt_m eq "minalyzer") {
        &runMinalyzer($run);
    } elsif ($opt_m eq "calibration") {
        &runPixelFillQualityLM($run);
    } elsif ($opt_m eq "raw") {
        &submitJobsRaw($run, $nEvents);
    } else {
        print(&prefix("processRuns"), "Unknown option $opt_m\n");
        print(&prefix("processRuns"), "Usage: rerunDQM -m <min|dqm> -e <2025April>\n");
        exit(1);
    }
}

# ----------------------------------------------------------------------
sub runMinalyzer() {
    my $dir = "$BASEDIR/minalyzer";
    print(&prefix("runMinalyzer"), "Running minalyzer in $dir for run $run\n");
    system("mkdir -p $dir/log");
    my $srun = sprintf("run%05d", $run);
    my $cmd0 = "rm -f log/dqm_$srun.log";
    my $cmd1 = "_build/analyzer/minalyzer --mt $DATADIR/$srun.mid.lz4 -- --cdb.dbconn=$CDB --cdb.gt=$BASEGT  >& log/dqm_$srun.log ";
    if ($opt_d) {
        print(&prefix("runMinalyzer"), "->$cmd1<-\n");
        print(&prefix("runMinalyzer"), "cd $dir && $cmd0 && $cmd1 && cd - \n");
    } else {
        print(&prefix("runMinalyzer"), "->$cmd1<-\n");
        system("cd $dir && $cmd0 && $cmd1 && cd - ");
    }
}


# ----------------------------------------------------------------------
sub runPixelFillQualityLM() {
    ($run) = @_;
    my $dir = "$MU3EANCA/analysis";
    system("mkdir -p $dir/log");
    system("mkdir -p $dir/out");
    system("mkdir -p $dir/csv");
    system("mkdir -p $dir/payloads");
    my $srun = sprintf("%05d", $run);
    print(&prefix("runPixelFillQualityLM"), "Processing DQM output for run $run in directory $dir\n");
    my $cmd0 = "rm -f log/dqm_$srun.log";
    my $lgt = ""; 
    if ($GT) {
        $lgt = "-g $GT";
    }
    my $cmd1 = "bin/pixelFillQualityLM -j $CDB $lgt -f $ROF/dqm_histos_$srun.root  >& log/dqm_$srun.log ";
    if ($opt_d) {
        print(&prefix("runPixelFillQualityLM"), "Running DQM for run $run in directory $dir\n");
        print(&prefix("runPixelFillQualityLM"), "->$cmd0 && $cmd1 && $cmd2<-\n");
    } else {
        print(&prefix("runPixelFillQualityLM"), "Running DQM for run $run in directory $dir\n");
        print(&prefix("runPixelFillQualityLM"), "->$cmd0 && $cmd1<-\n");
        system("cd $dir && $cmd0 && $cmd1 && cd - ");
    }
    # insertIovTag -j ~/data/mu3e/cdb -t pixelqualitylm_datav6.1=2025CosmicsVtxOnly -i 472
    if ($opt_u) {
        my $cmd2 = "$MU3EANCA/scripts/insertIovTag -j $CDB -t pixelqualitylm_$GT -i $run";
        print(&prefix("runPixelFillQualityLM"), "cmd2: $cmd2\n");
        my $payloadname = "tag_pixelqualitylm_" . $GT . "_iov_$run";
        my $cmd3 = "/bin/cp payloads/$payloadname $CDB/payloads/";
        print(&prefix("runPixelFillQualityLM"), "cmd3: $cmd3\n");           
        system("cd $dir && $cmd2 && $cmd3 && cd - ");
    }
}


# ----------------------------------------------------------------------
sub setGoodRuns() {
    if ($opt_e eq "2025April") {
        push(@goodRuns, (551, 552, 553));
        push(@goodRuns, (512, 513));
        push(@goodRuns, (489, 490));
        push(@goodRuns, (481, 482, 483));
        for (my $i = 462; $i <= 473; $i++) { push(@goodRuns, $i); }
        push(@goodRuns, 460);
        for (my $i = 443; $i <= 453; $i++) { push(@goodRuns, $i); }
        for (my $i = 431; $i <= 437; $i++) { push(@goodRuns, $i); }
        for (my $i = 415; $i <= 425; $i++) { push(@goodRuns, $i); }
        for (my $i = 337; $i <= 342; $i++) { push(@goodRuns, $i); }
        push(@goodRuns, (323, 330));
        push(@goodRuns, (283, 284));
        push(@goodRuns, (277, 278));
        push(@goodRuns, 264);
        push(@goodRuns, 256);
        push(@goodRuns, 248);
    } elsif ($opt_e eq "runs") {
        if ($opt_r) {
            @goodRuns = split(/,/, $opt_r);
        } else {
            print "Error: No run numbers provided with -r option\n";
            exit(1);
        }
    }

    if ($opt_c) {
        my $file = $opt_c;
        open(IN, "$file") || die "processRuns: Cannot open $file\n";
        $lines = <IN>;
        close(IN);
        $lines =~ s/\{//g;
        $lines =~ s/\}//g;
        $lines =~ s/\n//g;
        $lines =~ s/\s//g;
        @goodRuns = split(/,/, $lines);
    }
}

# ----------------------------------------------------------------------
sub countEvents0() {
    ($run) = @_;
    my $file = sprintf("$DATADIR/raw/run%05d.mid.lz4", $run);
    print(&prefix("countEvent"), "run = $run -> file = $file\n");

    my $cmdString = "$counterExe $file | grep Evid:0001 | wc -m ";
    print(&prefix("countEvent"), "$cmdString\n");
    $result = `$cmdString`;
    chop($result);
    print(&prefix("countEvent"), "countEvents = $result\n");
    return $result;
}

# ----------------------------------------------------------------------
sub countEvents() {
    ($run) = @_;
    my $url = "http://pc11740/rdb/run/$run";
    print(&prefix("countEvents"), "run = $run -> url = $url\n");
    my $result = `curl -s $url`;
    
    # print(&prefix("countEvents"), "result = $result\n");
    
    if ($result =~ /\"Events\":(\d+)/) {
        $result = $1;
    } else {
        $result = 0;
    }
    
    print(&prefix("countEvent"), "countEvents = $result\n");
    return $result;
}

# ----------------------------------------------------------------------
sub prefix() {
    ($long) = @_;
    my $now = localtime;
    # -- fill up in case too short
    $long .= "                         ";
    $shorter = substr($long, 0, 15);
    return ($now . "/" . $shorter . "/ ");
}

# ----------------------------------------------------------------------
sub submitJobsRaw() {
    ($run, $lcevts) = @_;
    my $pcrFile = "nada";

    my $file = sprintf("$DATADIR/raw/run%05d.mid.lz4", $run);
    my $cmdString = "";
    my $envString = "";

    # -- adapt in case of mu3e reservations
    # my $queue = "-p 'mu3e --reservation=mu3e'";
    my $queue = "-p mu3e";

    # -- rundir
    my $rundir = "$BASEDIR/slurm/jobs/mlzr/$run";
    if (-d $rundir) {
        # -- remove possibly pre-existing job directory
        system("/bin/rm -rf $BASEDIR/slurm/jobs/mlzr/old/$rundir");
        system("/bin/mv $rundir $BASEDIR/slurm/jobs/mlzr/old");
    }
    mkdir($rundir);
    # -- rootdir
    my $rootdir = "$BASEDIR/slurm/storage1/mlzr/$run";
    if (-d $rootdir) {
        # -- remove possibly pre-existing job directory
        system("/bin/mv $rootdir $BASEDIR/slurm/storage1/mlzr/old");
    }
    mkdir($rootdir);
    print(&prefix("submitJobsRaw"), "submitJobsRaw rundir = $rundir, rootdir = $rootdir, file = $file\n");

    my $cmdIniString = "cd $rundir && ";
    $cmdIniString .= "$MU3EANCA/slurm/run $queue -t ../../../../slurm/$tarFile -c $MU3EANCA/run2025/scripts/slurm-analyzer.csh ";

    my $srunfile = sprintf("run%05d.mid.lz4", $run);

    # -- encode the configuration of the SLURM job
    $envString .= "'STORAGE1 $BASEDIR/slurm/storage1/mlzr";
    $envString .= "%DATADIR $DATADIR/raw";
    $envString .= "%MIDASFILE $srunfile";
    $envString .= "%RUN $run";

    # map ($slurmID => logfile)
    my %mSlurmIds;
    my @mergeFiles;
    my $NJOBS = int($lcevts/$nevts) + 1;
    print(&prefix("submitJobsRaw"), "NJOBS: $NJOBS because lcevts = $lcevts, nevts = $nevts\n");
    # -- submit jobs
    for ($ijob = 0; $ijob < $NJOBS; $ijob++) {
        # FIXME DO NOT FORGET
        last if ($ijob == 2);
        $job =  "$run" . "_$ijob";

        $gtString = "%GT $GT";

        $skipevts = $ijob * $nevts;
        if ($ijob < $NJOBS - 1) {
            $anlString  = "%ANLZR \"-s$skipevts -e$nevts\" '";
        } else {
            $anlString  = "%ANLZR \"-s$skipevts\" '";
        }

        $cmdString = $cmdIniString . "-r $envString$gtString$anlString " . "$job";

        print(&prefix("submitJobsRaw"), "SLURM: STORAGE1 $BASEDIR/slurm/storage1/mlzr $gtString $anlString\n");
        print(&prefix("submitJobsRaw"), "SLURM: $cmdString\n");
        if ($opt_d) {
            print(&prefix("submitJobsRaw"), "DBX: $cmdString\n");
        } else {
            $line = `$cmdString`;
            # -- to see $line, uncomment the next line:
            # print($line);

            my @lines = grep /\S/, split /\n/, $line;

            my $slurmid = 0, $slurmout = "nada";
            foreach $ln (@lines) {
                if ($ln =~ /Submitted ->([0-9]*)<- with name \.*/) {
                    $slurmid = $1;
                }
                if ($ln =~ /batch submission: (\w*)/) {
                    $slurmout = $1;
                }
            }
            if ($slurmid > 0) {
                print(&prefix("submitJobsRaw"), "SLURM job $slurmid -> $slurmout\n");
                $mSlurmIds{$slurmid} =  "tmp-$job/$slurmout.slurm.log";
                push(@mergeFiles, $job);
            }
        }
    }

    my $njobs = keys %mSlurmIds;
    if ($njobs < 1) {
        print(&prefix("submitJobsRaw"), "ERROR no slurm job finished, something went wrong?!\n");
        return $pcrFile;
    }

    my $slurmids = "(";
    my $cnt = 0;
    foreach $ele (keys %mSlurmIds) {
        $slurmids .= $ele;
        $cnt++;
        if ($cnt < $njobs) {$slurmids .= ", ";}
    }
    $slurmids .= ")";
    print(&prefix("submitJobsRaw"), "slurmids = $slurmids, sleep 30 second before looking at logfiles\n");
    sleep(30);

    # -- monitor jobs
    while ($njobs > 0) {
        if ($njobs > 20) {
            sleep(60);
        } elsif ($njobs > 10) {
            sleep(30);
        } else {
            sleep(10);
        }
        foreach $sjob (keys %mSlurmIds) {
            $result = `/bin/squeue -j $sjob`;
            my @lines = grep /\S/, split /\n/, $result;
            my $le = @lines;
            my $tail = "no file yet\n";
            if (-e "$BASEDIR/slurm/jobs/mlzr/$run/$mSlurmIds{$sjob}") {
                $tail = `/bin/tail -1 $BASEDIR/slurm/jobs/mlzr/$run/$mSlurmIds{$sjob}`;
            }
            print("    [$sjob:$mSlurmIds{$sjob}] $tail");
            if ($tail =~ /This is the end, my friend/) {
                delete($mSlurmIds{$sjob});
                my $bla = $mSlurmIds{$sjob};
            }
            $njobs = keys %mSlurmIds;
        }
    }

    print(&prefix("submitJobsRaw"), "all slurm jobs finished\n");

    $output = "$BASEDIR/slurm/storage1/mlzr";
    # my @resultFiles = ("pixel_histos", "fibre_histos", "tile_histos");
    my @resultFiles = ("dqm_histos_");
    foreach $file (@resultFiles) {
        my $srun = sprintf("%05d", $run);
        my $mergedFile = "$ROF/merged-$file$srun.root";
        system("/bin/rm -f $mergedFile");
        my $mergeString = "hadd $mergedFile";
        foreach $rf (@mergeFiles)  {
            $mergeString .= " $output/$run/root_output_files_$rf/$file$srun.root ";
        }

        if ($opt_d) {
            print(&prefix("submitJobsRaw DBX"), $mergeString);
        } else {
            print(&prefix("submitJobsRaw"), $mergeString);
            my $result = `$mergeString`;
            print("$result\n");
            print(&prefix("submitJobsRaw"), "merged root file: $mergedFile\n");
        }
    }
    return $mergedFile;
}