#! /usr/bin/perl
 
# ----------------------------------------------------------------------
# processRuns
# ===========
#
# Options: 
#           -c  certification file (with run list)
#           -d  debug mode
#           -e  {runs|keyword|watch} (where keyword is a predefined setting in the code, e.g. 2025April or r8k-1)
#           -g  GT
#           -i  initialize a new area. Note that the directory name will be the version
#           -m  mode (mode = raw|prompt|minalyzer|calibration)
#           -n  number of events
#           -r  run range (in combination with "-e runs")
#           -t  tarFile (mandatory for raw processing)
#           -u  update payloads
#           -w  watchFile with runs already processed
#
# Usage:       cd mu3eanca/run2025/scripts
#              ./processRuns -m minalyzer -c /Users/ursl/mu3e/mu3eanca/db0/cdb2/certification/2025/2025-Cage-v1-significant-tkar-cosmic.runs
#              ./processRuns -m minalyzer -e "2025April"
#              ./processRuns -m minalyzer -e runs -r "553,552,551"
#
#              ./processRuns -m calibration -e 2025April -g datav6.1=2025CosmicsVtxOnly 
#              ./processRuns -m calibration -e runs -r "553" -g datav6.1=2025CosmicsVtxOnly 
#              ./processRuns -m calibration -e 2025April -g datav6.1=2025CosmicsVtxOnly -u
#              ./processRuns -m calibration -c ../../db0/cdb2/certification/2025/2025-Cage-v1-significant-tkar-cosmic.runs -g datav6.1=2025CosmicsVtxOnly -u
#
#
#
#             merlin-l-002>wpd
#             /data/experiment/mu3e/code/offline/250528-v6.1pre
#             merlin-l-002>~/mu3e/mu3eanca/run2025/scripts/processRuns -i 
#             merlin-l-002>~/mu3e/mu3eanca/run2025/scripts/processRuns -t slurm/250606-mlzr.tar.gz -m prompt -e runs -r "2196"
#
# History
#         2025/09/05 add JSON RDB version before trying the RDB on pc11740
#         2025/09/05 remove call to countEvents when running "sort" with -e runs -r .... 
#         2025/08/19 add "cosmic" to do all up to and including sort
#         2025/06/25 getDataSubdir() now completely calculated, no more if statements
#         2025/06/24 add check against hitting the time limit in batch jobs. "sort" to run locally.
#         2025/06/18 add separate mu3eSort without splitting, rename submitJobsRaw, remove countEventsOld
#         2025/06/14 print runs to be processed if -r given
#         2025/06/12 bug fix for too small runs!
#         2025/06/11 move to allHistograms. Add SUBDIRECTORY for analysis of archived runs.
#         2025/06/10 add -i for initialization
#         2025/06/07 invoke pixelHistograms and curl-upload to RDB
#         2025/06/06 new option "prompt" to run minalyzer on raw and then produce the pixelqualitylm payload
#         2025/06/04 many small fixes for merging to work. GT passed into slurm-analyzer.csh. produce versioned directories for merged rootfiles.
#         2025/06/03 change countEvents to use to RDB
#         2025/05/28 complete rearrangement of loop/logic, merge in code from proCalRec
#         2025/05/26 remove leading whitespace when reading from certification file
#         2025/05/05 add -u option to update CDB tag IOV list
#         2025/05/03 add GT for pixelqualitylm payload generation
#         2025/04/30 first shot
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the
#
# Author    Urs Langenegger <urslangenegger@gmail.com>
# ----------------------------------------------------------------------
use Cwd;
use File::Basename;
use Env;
 
my $dir = getcwd;
 
use Getopt::Std;
getopts('c:de:g:im:n:r:t:uw:');
 
# ----------------------------------------------------------------------
# -- default values
# ----------------------------------------------------------------------
my $HOME     = $ENV{"HOME"};
# -- Version of (re)processing
my $VERSION  = "250429";
# -- Base directory with mu3e and minalyzer installations
my $BASEDIR  = "$HOME/mu3e/software/$VERSION";
# -- Base directory for mu3eanca
my $MU3EANCA = "$HOME/mu3e/mu3eanca/run2025";
# -- Base GT for running minalyzer
my $BASEGT   = "mcidealv6.1";
# -- Data directory
my $DATADIR  = "$HOME/mu3e/data/run2025";
# -- CDB directory (not the mirror of the master CDB!)
my $CDB      = "$HOME/mu3e/cdb";
# -- RDB directory 
my $RDB      = "$HOME/mu3e/cdb/runrecords";
# -- ROOT output directory
my $ROF      = "$BASEDIR/mlzr/root_output_files/";
# -- ROOT output directory for trirec
my $ROFTRIREC = "$BASEDIR/trirec/root_output_files/";
# -- Maximum number of runs to process
my $MAXRUN   = -1;
# -- GT for updating payloads and tag insertion
my $GT       = "mcidealv6.1";
# -- Minimum number of events to process a run
my $MINEVENTS= 10000;
# -- watch file with runs already processed
my $WATCHFILE = "$BASEDIR/processedRuns";
 


# -- modifications for merlin
if ($ENV{"HOST"} =~ "merlin") {
    $VERSION  = "250528-v6.1pre";
    ($filename, $directories) = fileparse($ENV{"PWD"});
    $VERSION = $filename;
    print(&prefix("processRuns"), "VERSION: $VERSION\n");
    $BASEDIR   = "/data/experiment/mu3e/code/offline/$VERSION";
    $MU3EANCA  = "/psi/home/langenegger/mu3e/mu3eanca";
    $CDB       = "$HOME/mu3e/cdb";
    $DATADIR   = "/data/experiment/mu3e/data/2025";
    $ROF       = "$DATADIR/mlzr/$VERSION";
    $ROFTRIREC = "$DATADIR/trirec/$VERSION";
    $ROFSORT   = "$DATADIR/trirec/$VERSION";
    $WATCHFILE = "$BASEDIR/processedRuns";

    if (-d $ROF) {
        # -- all is fine
    } else {
        mkdir($ROF);
    }
}

# -- modifications for merlin7
if ($ENV{"HOST"} =~ "merlin7") {
    $VERSION  = "250528-v6.1pre";
    ($filename, $directories) = fileparse($ENV{"PWD"});
    $VERSION = $filename;
    print(&prefix("processRuns"), "VERSION: $VERSION\n");
    $BASEDIR   = "/data/project/mu3e/offline/$VERSION";
    $MU3EANCA  = "/data/user/langenegger/mu3e/mu3eanca";
    $CDB       = "$HOME/mu3e/cdb";
    $RDB       = "/data/project/mu3e/cdb/runrecords";
    $DATADIR   = "/data/project/mu3e/data/2025";
    $ROF       = "$DATADIR/mlzr/$VERSION";
    $ROFTRIREC = "$DATADIR/trirec/$VERSION";
    $ROFSORT   = "$DATADIR/trirec/$VERSION";
    $WATCHFILE = "$BASEDIR/processedRuns";

    if (-d $ROF) {
        # -- all is fine
    } else {
        mkdir($ROF);
    }
}


# -- initialization after git cloning mu3e, minalyzer, anacombo and running relinkBin
if ($opt_i) {
     print(&prefix("processRuns"), "Initializing setup for VERSION ->$VERSION<- \n");
     my @olddirs = ("mlzr", "trirec", "sort");
     foreach my $olddir (@olddirs) {
        system("mkdir -p slurm/jobs/$olddir/old");
        system("mkdir -p slurm/storage1/$olddir/old");
     }
     my $cmd0 = "rm -f slurm/$VERSION.tar.gz";
     print(&prefix("processRuns"), "cmd0: $cmd0\n");
     system($cmd0);

    system("rm -f $BASEDIR/githashes");
    system("touch $BASEDIR/githashes");
    print(&prefix("processRuns"), "git hashes: $BASEDIR/minalyzer\n");
    system("cd $BASEDIR/minalyzer/ && git --no-pager log -n 1 >> $BASEDIR/githashes");
    print(&prefix("processRuns"), "git hashes: $BASEDIR/mu3e\n");
    system("cd $BASEDIR/mu3e/ && git --no-pager log -n 1 >> $BASEDIR/githashes");
    print(&prefix("processRuns"), "git hashes: $BASEDIR/mu3e/modules/mu3eUtil\n");
    system("cd $BASEDIR/mu3e/modules/mu3eUtil/ && git --no-pager log -n 1 >> $BASEDIR/githashes");
    print(&prefix("processRuns"), "git hashes: $BASEDIR/mu3e/pdf_summary\n");
    system("cd $BASEDIR/pdf_summary/ && git --no-pager log -n 1 >> $BASEDIR/githashes");
    print(&prefix("processRuns"), "git hashes: $BASEDIR/mu3e/anacomba\n");
    system("cd $BASEDIR/anacomba/ && git --no-pager log -n 1 >> $BASEDIR/githashes");
    system("cd $BASEDIR && cat githashes");

    my $cmd1 = "cd $BASEDIR/mu3e/run && ../_build/mu3eSim/mu3eSim --run 1 -n 1 --conf sim_beam.json --output mu3e_alignment.root";
    print(&prefix("processRuns"), "cmd1: $cmd1\n");
    system($cmd1);


     my $cmd = "cd $BASEDIR && tar zcvf slurm/$VERSION.tar.gz --exclude .git --exclude mu3e/install --exclude minalyzer/json_output --exclude minalyzer/root_output_files minalyzer mu3e ";
     print(&prefix("processRuns"), "cmd: $cmd\n");
     system($cmd);
     exit(0);
}

# -- tarfile
#    create it with
#      merlin-l-002>pwd
#      /data/experiment/mu3e/code/offline/250528-v6.1pre
#      merlin-l-002>tar zcvf slurm/250604-mlzr.tar.gz --exclude .git --exclude minalyzer/json_output --exclude mu3e/_build minalyzer mu3e

my $tarFile   = "unset.tar.gz";
if ($opt_t) {
    my($barefile, $directories) = fileparse($opt_t);
    $tarFile = $barefile;
}

if (($opt_m eq "raw") && ($tarFile eq "unset.tar.gz")) {
    die("A tar file MUST be specified!\n");
}

my $nevts = 100000;
if ($opt_n) {
    $nevts = $opt_n;
}
print(&prefix("processRuns"), "nevts: $nevts\n");

# -- GT
if ($opt_g) {
    $GT = "$opt_g";
}

# -- initialize what has been processed so far
my @processedRuns;
if ($opt_w) {
    $WATCHFILE = $opt_w;
    &readProcessedRuns();
}


# -- define which runs to process
my @goodRuns = ();
&setGoodRuns();


# ----------------------------------------------------------------------
# -- main loop and decision point is here
# ----------------------------------------------------------------------
if ($opt_w) {
    print(&prefix("processRuns"), "Watch mode\n");
    while (1) {
        my $run = &checkForNewRun();
        if ($run ne "nada") {
            my $nEvents = &countEvents($run);
            if ($opt_m eq "prompt") {
                #my $trCmd = "scp ursl\@129.129.143.120:/home/mu3e/online/runs/run0$run.mid.lz4 /data/experiment/mu3e/data/2025/raw"; 
                #my $trCmd = "cp -p /data/experiment/mu3e/data/2025/lazy/run0$run.mid.lz4 /data/experiment/mu3e/data/2025/raw/"; 
                my $trCmd = "cp -p /data/experiment/mu3e/data/2025/lazy/run0$run.mid.lz4 " . getDataSubdir($run) . " "; 
                print(&prefix("processRuns"), "trCmd: $trCmd\n");
                system($trCmd);
                #my $jsCmd = "scp ursl\@129.129.143.120:/home/mu3e/online/runs/run0$run.json /data/experiment/mu3e/data/2025/raw"; 
                #print(&prefix("processRuns"), "jsCmd: $jsCmd\n");
                #system($jsCmd);
            }
            if ($nEvents == 0) {
                print(&prefix("processRuns"), "Run $run has no events, waiting 100 seconds\n");
                sleep(100);
                $nEvents = &countEvents($run);
                if ($nEvents == 0) {
                    print(&prefix("processRuns"), "Run $run still has no events, waiting 200 seconds\n");
                    sleep(200);
                    $nEvents = &countEvents($run);
                }
            }
            if ($opt_m ne "cosmic" && $nEvents < $MINEVENTS) {
                print(&prefix("processRuns"), "Skipping run $run, as too few events\n");
            } else {
                if ($opt_m eq "minalyzer") {
                    &runMinalyzer($run);
                } elsif ($opt_m eq "calibration") {
                    &runPixelFillQualityLM($run);
                } elsif ($opt_m eq "raw") {
                    &submitJobsRawMinalyzer($run, $nEvents);
                } elsif ($opt_m eq "trirec") {
                    &submitJobsRawTrirec($run, $nEvents);
                } elsif ($opt_m eq "sortreco") {
                    &submitJobsRawSort($run);
                    &submitJobsRawTrirec($run, $nEvents);
                } elsif ($opt_m eq "cosmic") {
                    my $trCmd = "cp -p /data/experiment/mu3e/data/2025/lazy/run0$run.mid.lz4 " . getDataSubdir($run) . " "; 
                    print(&prefix("processRuns"), "trCmd: $trCmd\n");
                    system($trCmd);
                    &submitJobsRawMinalyzer($run, $nEvents);
                    &runPixelFillQualityLM($run);      
                    &copyDQMFilesToOnline($run);
                    &submitJobsRawSort($run);
                    #&submitJobsRawTrirec($run, $nEvents);
                } elsif ($opt_m eq "prompt") {
                    &submitJobsRawMinalyzer($run, $nEvents);
                    &runPixelFillQualityLM($run); 
                    &copyDQMFilesToOnline($run);
                    #no &submitJobsRawSort($run);
                    #NO! &submitJobsRawTrirec($run);
                    #&runPDFSummary($run);
                } elsif ($opt_m eq "nada") {
                    print(&prefix("processRuns"), "Skipping run $run, as no action requested\n");
                    sleep(10);
                } else {
                    print(&prefix("processRuns"), "Unknown option $opt_m\n");
                    exit(1);
                }
            }

            # -- update $WATCHFILE
            open(OUT, ">>$WATCHFILE") || die "processRuns: Cannot open $WATCHFILE\n";
            print OUT "$run\n";
            close(OUT);
            # -- update @processedRuns
            push(@processedRuns, $run);
            
        }
        sleep(10);
    }
    exit(0);
}


# -- count events for all runs
my $nrun = 0;
foreach my $run (@goodRuns) {
    $nrun++;
    if ($MAXRUN > 0 && $nrun > $MAXRUN) {
        print(&prefix("processRuns"), "Skipping run $run, as too many runs processed\n");
        next;
    }

    my $nEvents = &countEvents($run);
    if (!($opt_m =~ /sort/) && !($opt_m =~ /minalyzer/)) {

        if ($opt_m ne "cosmic" && $opt_m ne "minalyzer" && $nEvents < $MINEVENTS) {
          print(&prefix("processRuns"), "Skipping run $run, as too few events\n");
          next;
        }
    }
    if ($opt_m eq "minalyzer") {
        # &runMinalyzer($run);
        &submitJobsRawMinalyzer($run, $nEvents);
    } elsif ($opt_m eq "calibration") {
        &runPixelFillQualityLM($run);
    } elsif ($opt_m eq "raw") {
        &submitJobsRawMinalyzer($run, $nEvents);
    } elsif ($opt_m eq "pdfsummary") {
        &runPDFSummary($run);
    } elsif ($opt_m eq "trirec") {
        &submitJobsRawTrirec($run, $nEvents);
    } elsif ($opt_m eq "sortreco") {
        &submitJobsRawSort($run);
        &submitJobsRawTrirec($run, $nEvents);
    } elsif ($opt_m eq "cosmic") {
        &submitJobsRawMinalyzer($run, $nEvents);
        &runPixelFillQualityLM($run);      
        #&copyDQMFilesToOnline($run);
        &submitJobsRawSort($run);
        #&submitJobsRawTrirec($run, $nEvents);
    } elsif ($opt_m eq "sort") {
        &submitJobsRawSort($run);
        #&runSort($run);
    } elsif ($opt_m eq "prompt") {
        &submitJobsRawMinalyzer($run, $nEvents);
        &runPixelFillQualityLM($run);      
        &copyDQMFilesToOnline($run);
        #no&submitJobsRawSort($run);
        #NO! &submitJobsRawTrirec($run);
        #&runPDFSummary($run);
    } elsif ($opt_m eq "nada") {
        print(&prefix("processRuns"), "Skipping run $run, as no action requested\n");
        sleep(10);
    } else {
        print(&prefix("processRuns"), "Unknown option $opt_m\n");
        exit(1);
    }
}

# ----------------------------------------------------------------------
sub runMinalyzer() {
    my $dir = "$BASEDIR/minalyzer";
    print(&prefix("runMinalyzer"), "Running minalyzer in $dir for run $run\n");
    system("mkdir -p $dir/log");
    my $srun = sprintf("run%05d", $run);
    my $cmd0 = "rm -f log/dqm_$srun.log";
    my $DATASUBDIR = "$DATADIR/raw";
    if ($run < 1000) {
        $DATASUBDIR = "$DATADIR/raw/000";
    } elsif ($run < 2000) {
        $DATASUBDIR = "$DATADIR/raw/001";
    } elsif ($run < 3000) {
        $DATASUBDIR = "$DATADIR/raw/002";
    } else {
        $DATASUBDIR = "$DATADIR/raw";
    } 

    my $cmd1 = "_build/analyzer/minalyzer --mt $DATASUBDIR/$srun.mid.lz4 -- --cdb.dbconn=$CDB --cdb.gt=$BASEGT  >& log/dqm_$srun.log ";
    if ($opt_d) {
        print(&prefix("runMinalyzer"), "->$cmd1<-\n");
        print(&prefix("runMinalyzer"), "cd $dir && $cmd0 && $cmd1 && cd - \n");
    } else {
        print(&prefix("runMinalyzer"), "->$cmd1<-\n");
        system("cd $dir && $cmd0 && $cmd1 && cd - ");
    }
}

# ----------------------------------------------------------------------
sub runPDFSummary() {
    ($run) = @_;
    my $dir = "$BASEDIR/pdf_summary";
    my $srun = sprintf("%05d", $run);

    my $cmd = "_build/Prompt $ROF/merged-dqm_histos_$srun.root";
    print(&prefix("runPDFSummary"), "Running PDF summary for run $run in directory $dir, ->$cmd<-\n");
    system("cd $dir && $cmd && cd - ");

    my $cmd2 = "mv dqm_$srun.tex dqm-$VERSION-$srun.tex && pdflatex dqm-$VERSION-$srun.tex";
    print(&prefix("runPDFSummary"), "->$cmd2<-\n");
    system("cd $dir && $cmd2 && cd - ");

    my $cmd3 = "curl -X POST -F \"pdf=\@$BASEDIR/pdf_summary/dqm-$VERSION-$srun.pdf\" -F \"description=pr\" http://pc11740.psi.ch:5050/rdb/addResource/$run";
    print(&prefix("runPDFSummary"), "->$cmd3<-\n");
    system("cd $dir && $cmd3 && cd -");
}


# ----------------------------------------------------------------------
sub runAnaComba() {
    ($run) = @_;
    my $dir = "$BASEDIR/anacomba";
    my $srun = sprintf("%05d", $run);
    my $cmd = "_build/anacomba/anacomba -j $CDB -g $BASEGT -r $run";
    print(&prefix("runAnaComba"), "Running anacomba for run $run in directory $dir, ->$cmd<-\n");
}


# ----------------------------------------------------------------------
sub runSort() {
    ($run) = @_;
    my $dir = "$BASEDIR/mu3e/run";
    my $DATASUBDIR = &getDataSubdir($run);
    my $srun = sprintf("%05d", $run);
    my $addCfg = "--conf trirec_twolayer_cosmic.conf";
    my $outFile = "$ROFSORT/run$srun-sorted.root";

    my $cmd = "../_build/mu3eSim/sort/mu3eSort --alignment.file=mu3e_alignment.root $addCfg $DATASUBDIR/run0$run.mid.lz4 --output $outFile";
    print(&prefix("runSort"), "Running sort for run $run in directory $dir, ->$cmd<-\n");
    if ($opt_d) {
        print(&prefix("runSort"), "->$cmd<-\n");
    } else {
        system("cd $dir && $cmd && cd - ");
    }
}


# ----------------------------------------------------------------------
sub runPixelFillQualityLM() {
    ($run) = @_;
    my $dir = "$MU3EANCA/run2025/analysis";
    system("mkdir -p $dir/log");
    system("mkdir -p $dir/out");
    system("mkdir -p $dir/csv");
    system("mkdir -p $dir/payloads");
    my $srun = sprintf("%05d", $run);
    print(&prefix("runPixelFillQualityLM"), "Processing DQM output for run $run in directory $dir\n");
    my $cmd0 = "rm -f log/dqm_$srun.log";
    my $lgt = ""; 
    if ($GT) {
        $lgt = "-g $GT";
    }
    my $cmd1 = "bin/pixelFillQualityLM -j $CDB $lgt -f $ROF/merged-dqm_histos_$srun.root  >& log/dqm_$srun.log ";
    if ($opt_d) {
        print(&prefix("runPixelFillQualityLM"), "Running DQM for run $run in directory $dir\n");
        print(&prefix("runPixelFillQualityLM"), "->$cmd0 && $cmd1 && $cmd2<-\n");
    } else {
        print(&prefix("runPixelFillQualityLM"), "Running DQM for run $run in directory $dir\n");
        print(&prefix("runPixelFillQualityLM"), "->$cmd0 && $cmd1<-\n");
        system("cd $dir && $cmd0 && $cmd1 && cd - ");
    }

    if ($opt_u) {
        my $cmd2 = "$MU3EANCA/run2025/scripts/insertIovTag -j $CDB -t pixelqualitylm_$GT -i $run";
        print(&prefix("runPixelFillQualityLM"), "cmd2: $cmd2\n");
        my $payloadname = "tag_pixelqualitylm_" . $GT . "_iov_$run";
        my $cmd3 = "/bin/cp payloads/$payloadname $CDB/payloads/";
        print(&prefix("runPixelFillQualityLM"), "cmd3: $cmd3\n");           
        #FIXME system("cd $dir && $cmd2 && $cmd3 && cd - ");
        system("cd $dir && $cmd3 && cd - ");
    }

    # FIXME
    #print(&prefix("runPixelFillQualityLM"), "FIXME: STOPPING HERE, NOT RDB UPLOADING\n");
    #return;

    my $cmd2 = "bin/allHistograms -f $ROF/merged-dqm_histos_$srun.root  >& log/allHistograms_$srun.log ";
    if ($opt_d) {
        print(&prefix("runPixelFillQualityLM"), "Running allHistograms for run $run in directory $dir\n");
        print(&prefix("runPixelFillQualityLM"), "->$cmd2<-\n");
    } else {
        print(&prefix("runPixelFillQualityLM"), "Running allHistograms for run $run in directory $dir\n");
        print(&prefix("runPixelFillQualityLM"), "->$cmd2<-\n");
        system("cd $dir && $cmd2 && cd -");
        
        # -- Check if merged file exists and is larger than 1 MB
        my $mergedFile = "$ROF/merged-dqm_histos_$srun.root";
        if (-e $mergedFile) {
            my $filesize = -s $mergedFile;
            if ($opt_m ne "cosmic" && $filesize < 1048576) {  # 1 MB = 1048576 bytes
                print(&prefix("runPixelFillQualityLM"), "WARNING: Merged file $mergedFile is smaller than 1 MB (size: " . sprintf("%.2f", $filesize/1048576) . " MB)\n");
            } else {
                print(&prefix("runPixelFillQualityLM"), "Merged file size: " . sprintf("%.2f", $filesize/1048576) . " MB\n");
                my $cmd3 = "curl -X POST -F \"pdf=\@$dir/summary-$run.pdf\" -F \"description=ov\" http://pc11740.psi.ch:5050/rdb/addResource/$run";
                print(&prefix("runPixelFillQualityLM"), "->$cmd3<-\n");
                system("cd $dir && $cmd3 && cd -");
            }
        }
    }

}


# ----------------------------------------------------------------------
sub setGoodRuns() {
    if ($opt_e eq "2025April") {
        push(@goodRuns, (551, 552, 553));
        push(@goodRuns, (512, 513));
        push(@goodRuns, (489, 490));
        push(@goodRuns, (481, 482, 483));
        for (my $i = 462; $i <= 473; $i++) { push(@goodRuns, $i); }
        push(@goodRuns, 460);
        for (my $i = 443; $i <= 453; $i++) { push(@goodRuns, $i); }
        for (my $i = 431; $i <= 437; $i++) { push(@goodRuns, $i); }
        for (my $i = 415; $i <= 425; $i++) { push(@goodRuns, $i); }
        for (my $i = 337; $i <= 342; $i++) { push(@goodRuns, $i); }
        push(@goodRuns, (323, 330));
        push(@goodRuns, (283, 284));
        push(@goodRuns, (277, 278));
        push(@goodRuns, 264);
        push(@goodRuns, 256);
        push(@goodRuns, 248);
    } elsif ($opt_e eq "runs") {
        if ($opt_r) {
            @goodRuns = split(/,/, $opt_r);
            print(&prefix("setGoodRuns"), "goodRuns: ");
            foreach $irun (@goodRuns) {
                print(" $irun");
            }
            print("\n");
        } else {
            print "Error: No run numbers provided with -r option\n";
            exit(1);
        }
    } elsif ($opt_e eq "r9k-1") {
        @goodRuns = (
         9361,9360,9359,9358,9357,9356,9355,9354,9353,9352,9351,9350,9349,9348,
         9347,9346,9345,9344,9343,9342,9341,9340,9339,9338,9337,9336,9335,9334,
         9333,9332,9331,9330,9329,9328,9327,9326,9325,9324,9323,9322,9321,9320,
         9319,9318,9317,9316,9315,9314,9313,9312,9311,9310,9309,9308,9307,9306,
         9305,9304,9303,9302,9301,9300,9298,9297,9296,9295,9294,9293,9292,9291,
         9290,9289,9288,9287,9286,9285,9284,9283,9282,9281,9280,9279,9278,9277,
         9276,9275,9274,9273,9272,9271,9270,9269,9268,9267,9266,9265,9264,9263,
         9262,9261,9260,9259,9258,9257,9256,9255,9254,9253,9252,9251,9250,9249,
         9248,9246,9245,9244,9243,9242,9241,9240,9239,9238,9237,9236,9235,9234,
         9233,9232,9231,9230,9229,9228,9227,9226,9225,9224,9223,9222,9221,9220,
         9219,9218,9217,9216,9215,9214,9213,9212,9211,9210,9209,9208,9207,9206,
         9205,9204,9203,9202,9201,9200,9199,9198,9197,9196,9195,9194,9193,9192,
         9191,9190,9189,9188,9187,9186,9185,9184,9183,9182,9181,9180,9179,9178,
         9177,9176,9175,9174,9173,9172,9171,9170,9169,9168,9167,9166,9165,9164,
         9163,9162,9161,9160,9159,9158,9157,9156,9155,9154,9153,9152,9151,9150,
         9149,9148,9147,9146,9145,9144,9143,9142,9141,9140,9139,9138,9137,9136,
         9135,9134,9133,9132,9131,9130,9129,9128,9127,9126,9125,9124,9123,9122,
         9121,9120,9119,9118,9117,9116,9115,9114,9113,9112,9111,9110,9109,9108,
         9107,9106,9105,9104,9103,9102,9101,9100,9099,9098,9097,9096,9095,9094,
         9093,9092,9091,9090,9089,9088,9087,9086,9085,9084,9083,9082,9081,9080,
         9079,9078,9077,9076,9075,9074,9073,9072,9071,9070,9069,9068,9067,9066,
         9065,9064,9063,9062,9061,9060,9059,9058,9057,9056,9055,9054,9053,9052,
         9051,9050,9049,9048,9047,9046,9045,9044,9043,9042,9041,9040,9039,9038,
         9037,9036,9035,9034,9033,9032,9031,9030,9029,9028,9027,9026,9025,9024,
         9023,9022,9021,9020,9019,9018,9017,9016,9015,9014,9013,9012,9011,9010,
         9009,9008,9007,9006,9005,9004,9003,9002,9001,9000
        );
    } elsif ($opt_e eq "r8k-1") {
        @goodRuns = (
        8999,8998,8997,8996,8995,8994,8993,8992,8991,8990,8989,8988,8987,8986,
        8985,8984,8983,8982,8981,8980,8979,8978,8977,8976,8975,8974,8973,8972,
        8971,8970,8969,8968,8967,8966,8965,8964,8963,8962,8961,8960,8959,8958,
        8957,8956,8955,8954,8953,8952,8951,8950,8949,8948,8947,8946,8945,8944,
        8943,8942,8941,8940,8939,8938,8937,8936,8935,8934,8933,8932,8931,8930,
        8929,8928,8927,8926,8925,8924,8923,8922,8921,8920,8919,8918,8917,8916,
        8915,8914,8913,8912,8911,8910,8909,8908,8907,8906,8905,8904,8903,8902,
        8901,8900,8899,8898,8897,8896,8895,8894,8893,8892,8891,8890,8889,8888,
        8887,8886,8885,8884,8883,8882,8881,8880,8879,8878,8877,8876,8875,8874,
        8873,8872,8871,8870,8869,8868,8867,8866,8865,8864,8863,8862,8861,8860,
        8859,8858,8857,8856,8855,8854,8853,8852,8851,8850,8849,8848,8847,8846,
        8845,8844,8843,8842,8841,8840,8839,8838,8837,8836,8835,8834,8833,8832,
        8831,8830,8829,8828,8827,8826,8825,8824,8823,8822,8821,8820,8819,8818,
        8817,8816,8815,8814,8813,8812,8811,8810,8809,8808,8807,8806,8805,8804,
        8803,8802,8801,8800
        );
    } elsif ($opt_e eq "r8k-2") {
        @goodRuns = (
        8799,8798,8797,8796,8795,8794,8793,8792,8791,8790,8789,8788,8787,8786,
        8785,8784,8783,8782,8781,8780,8779,8778,8777,8776,8775,8774,8773,8772,
        8771,8770,8769,8768,8767,8766,8765,8764,8763,8762,8761,8760,8759,8758,
        8757,8756,8755,8754,8753,8752,8751,8750,8749,8748,8747,8746,8745,8744,
        8743,8742,8741,8740,8739,8738,8737,8736,8735,8734,8733,8732,8731,8730,
        8729,8728,8727,8726,8725,8724,8723,8722,8721,8720,8719,8718,8717,8716,
        8715,8714,8713,8712,8711,8710,8709,8708,8707,8706,8705,8704,8703,8702,
        8701,8700,8699,8698,8697,8696,8695,8694,8693,8692,8691,8690,8689,8688,
        8687,8686,8685,8684,8683,8682,8681,8680,8679,8678,8677,8676,8675,8674,
        8673,8672,8671,8670,8669,8668,8667,8666,8665,8664,8663,8662,8661,8660,
        8659,8658,8657,8656,8655,8654,8653,8652,8651,8650,8649,8648,8647,8646,
        8645,8644,8643,8642,8641,8640,8639,8638,8637,8636,8635,8634,8633,8632,
        8631,8630,8629,8628,8627,8626,8625,8624,8623,8622,8621,8620,8619,8618,
        8617,8616,8615,8614,8613,8612,8611,8610,8609,8608,8607,8606,8605,8604,
        8603,8602,8601,8600
        );
    } elsif ($opt_e eq "r8k-3") {
        @goodRuns = (
        8599,8598,8597,8596,8595,8594,8593,8592,8591,8590,8589,8588,8587,8586,
        8585,8584,8583,8582,8581,8580,8579,8578,8577,8576,8575,8574,8573,8572,
        8571,8570,8569,8568,8567,8566,8565,8564,8563,8562,8561,8560,8559,8558,
        8557,8556,8555,8554,8553,8552,8551,8550,8549,8548,8547,8546,8545,8544,
        8543,8542,8541,8540,8539,8538,8537,8536,8535,8534,8533,8532,8531,8530,
        8529,8528,8527,8526,8525,8524,8523,8522,8521,8520,8519,8518,8517,8516,
        8515,8514,8513,8512,8511,8510,8509,8508,8507,8506,8505,8504,8503,8502,
        8501,8500,8499,8498,8497,8496,8495,8494,8493,8492,8491,8490,8489,8488,
        8487,8486,8485,8484,8483,8482,8481,8480,8479,8478,8477,8476,8475,8474,
        8473,8472,8471,8470,8469,8468,8467,8466,8465,8464,8463,8462,8461,8460,
        8459,8458,8457,8456,8455,8454,8453,8452,8451,8450,8449,8448,8447,8446,
        8445,8444,8443,8442,8441,8440,8439,8438,8436,8435,8434,8433,8432,8431,
        8430,8429,8428,8427,8426,8425,8424,8423,8422,8421,8420,8419,8418,8417,
        8416,8415,8414,8413,8412,8411,8410,8409,8408,8407,8406,8405,8404,8403,
        8402,8401,8400
        );  
    } elsif ($opt_e eq "r8k-4") {
        @goodRuns = (
        8399,8398,8397,8396,8395,8394,8393,8392,8391,8390,8389,8388,8387,8386,
        8385,8384,8383,8382,8381,8380,8379,8378,8377,8376,8375,8374,8373,8372,
        8371,8370,8369,8368,8367,8366,8365,8364,8363,8362,8361,8360,8359,8358,
        8357,8356,8355,8354,8353,8352,8351,8350,8349,8348,8347,8346,8345,8344,
        8343,8342,8341,8340,8339,8338,8337,8336,8335,8334,8333,8332,8331,8330,
        8329,8328,8327,8326,8325,8324,8323,8322,8321,8320,8319,8318,8317,8316,
        8315,8314,8313,8312,8311,8310,8309,8308,8307,8306,8305,8304,8303,8302,
        8301,8300,8299,8298,8297,8296,8295,8294,8293,8292,8291,8290,8289,8288,
        8287,8286,8285,8284,8283,8282,8281,8280,8279,8278,8277,8276,8275,8274,
        8273,8272,8271,8270,8269,8268,8267,8266,8265,8264,8263,8262,8261,8260,
        8259,8258,8257,8256,8255,8254,8253,8252,8251,8250,8249,8248,8247,8246,
        8245,8244,8243,8242,8241,8240,8239,8238,8237,8236,8235,8234,8233,8232,
        8231,8230,8229,8228,8227,8226,8225,8224,8223,8222,8221,8220,8219,8218,
        8217,8216,8215,8214,8213,8212,8211,8210,8209,8208,8207,8206,8205,8204,
        8203,8202,8201,8200
        );
    } elsif ($opt_e eq "r8k-5") {
        @goodRuns = (
        8199,8198,8197,8196,8195,8194,8193,8192,8191,8190,8189,8188,8187,8186,
        8185,8184,8183,8182,8181,8180,8179,8178,8177,8176,8175,8174,8173,8172,
        8171,8170,8169,8168,8167,8166,8165,8164,8163,8162,8161,8160,8159,8158,
        8157,8156,8155,8154,8153,8152,8151,8150,8149,8148,8147,8146,8145,8144,
        8143,8142,8141,8140,8139,8138,8137,8136,8135,8134,8133,8132,8131,8130,
        8129,8128,8127,8126,8125,8124,8123,8122,8121,8120,8119,8118,8117,8116,
        8115,8114,8113,8112,8111,8110,8109,8108,8107,8106,8105,8104,8103,8102,
        8101,8100,8099,8098,8097,8096,8095,8094,8093,8092,8091,8090,8089,8088,
        8087,8086,8085,8084,8083,8082,8081,8080,8079,8078,8077,8076,8075,8074,
        8073,8072,8071,8070,8069,8068,8067,8066,8065,8064,8063,8062,8061,8060,
        8059,8058,8057,8056,8055,8054,8053,8052,8051,8050,8049,8048,8047,8046,
        8045,8044,8043,8042,8041,8040,8039,8038,8037,8036,8035,8034,8033,8032,
        8031,8030,8029,8028,8027,8026,8025,8024,8023,8022,8021,8020,8019,8018,
        8017,8016,8015,8014,8013,8012,8011,8010,8009,8008,8007,8006,8005,8004,
        8003,8002,8001,8000
        );
    } elsif ($opt_e eq "r7k-1") {
        @goodRuns = (
        7999,7998,7997,7996,7995,7994,7993,7992,7991,7990,7989,7988,7987,7986,
        7985,7984,7983,7982,7981,7980,7979,7978,7977,7976,7975,7974,7973,7972,
        7971,7970,7969,7968,7967,7966,7965,7964,7963,7962,7961,7960,7959,7958,
        7957,7956,7955,7954,7953,7952,7951,7950,7949,7948,7947,7946,7945,7944,
        7943,7942,7941,7940,7939,7938,7937,7936,7935,7934,7933,7932,7931,7930,
        7929,7928,7927,7926,7925,7924,7923,7922,7921,7920,7919,7918,7917,7916,
        7915,7914,7913,7912,7911,7910,7909,7908,7907,7906,7905,7904,7903,7902,
        7901,7900,7899,7898,7897,7896,7895,7894,7893,7892,7891,7890,7889,7888,
        7887,7886,7885,7884,7883,7882,7881,7880,7879,7878,7877,7876,7875,7874,
        7873,7872,7871,7870,7869,7868,7867,7866,7865,7864,7863,7862,7861,7860,
        7859,7858,7857,7856,7855,7854,7853,7852,7851,7850,7849,7848,7847,7846,
        7845,7844,7843,7842,7841,7840,7839,7838,7837,7836,7835,7834,7833,7832,
        7831,7830,7829,7828,7827,7826,7825,7824,7823,7822,7821,7820,7819,7818,
        7817,7816,7815,7814,7813,7812,7811,7810,7809,7808,7807,7806,7805,7804,
        7803,7802,7801,7800
        );
    }
    if ($opt_c) {
        my $file = $opt_c;
        open(IN, "$file") || die "processRuns: Cannot open $file\n";
        $lines = <IN>;
        close(IN);
        $lines =~ s/\{//g;
        $lines =~ s/\}//g;
        $lines =~ s/\n//g;
        $lines =~ s/\s//g;
        @goodRuns = split(/,/, $lines);
    }
}


# ----------------------------------------------------------------------
sub getDataSubdir {
    ($run) = @_;
    my $DATASUBDIR = "$DATADIR/raw";
    my $block = $run / 1000;
    my $blockdir = sprintf("%03d", $block);
    $DATASUBDIR = "$DATADIR/raw/$blockdir";
    print(&prefix("getDataSubdir"), "run $run, DATASUBDIR = $DATASUBDIR\n");
    return $DATASUBDIR;
}

# ----------------------------------------------------------------------
sub getGitInfo() {
    my $cmd = "git --no-pager log -1 --format=\"%H %s\" --oneline && git status --porcelain | head -10";
    my $result = `$cmd`;
    $result =~ s/\n/, /g;
    $result =~ s/\?\?_build//g;
    return $result;
}

# ----------------------------------------------------------------------
sub getSortSubdir {
    ($run) = @_;
    my $DATASUBDIR = "$DATADIR/trirec/$VERSION";
    return $DATASUBDIR;
}


# ----------------------------------------------------------------------
sub countEvents() {
    ($run) = @_;
    # -- check if JSON RDB exists and has runrecord for this run
    #if (-e "$RDB/runRecord_$run.json") {
    #    my $result = `cat $RDB/runRecord_$run.json`;
    #    if ($result =~ /\"Events\":(\d+)/) {
    #        $result = $1;
    #    } 
    #    return $result;
    #}

    # -- otherwise use the REST API
    my $url = "http://pc11740.psi.ch/rdb/run/$run";
    print(&prefix("countEvents"), "run = $run -> url = $url\n");
    my $result = `curl -s $url`;
    
    #print(&prefix("countEvents"), "result: ->$result<-\n");
    
    if ($result =~ /\"Events\":(\d+)/) {
        $result = $1;
    } else {
        $result = 0;
    }
    
    print(&prefix("countEvent"), "countEvents = $result\n");
    return $result;
}

# ----------------------------------------------------------------------
sub prefix() {
    ($long) = @_;
    my $now = localtime;
    # -- fill up in case too short
    $long .= "                         ";
    $shorter = substr($long, 0, 15);
    return ($now . "/" . $shorter . "/ ");
}

# ----------------------------------------------------------------------
sub readProcessedRuns() {
    open(IN, "$WATCHFILE") || die "processRuns: Cannot open $WATCHFILE\n";
    while (<IN>) {
        chop;
        push(@processedRuns, $_);
    }
    close(IN);
 
    print(&prefix("readProcessedRuns"), "processed runs: ");
    if ($opt_d) {
        foreach $irun (@processedRuns) {
            print(" $irun");
        }
    } else {
        print(" $#processedRuns runs  (use -d to see full list)");
    }
    print("\n");
}


# ----------------------------------------------------------------------
sub checkForNewRun() {

    my $url = "http://pc11740.psi.ch/rdb/allRunNumbers";
    print(&prefix("checkForNewRun"), "url = $url\n");
    my $result = `curl -s $url`;
    $result =~ s/\[//g;
    $result =~ s/\]//g;
    $result =~ s/\n//g;
    $result =~ s/\s//g;
    my @runNumbers = split(/,/, $result);
    my @newruns = ();
    foreach $irun (@runNumbers) {
        if (grep(/^$irun$/, @processedRuns) ) {
             # print "Found $irun in processedRuns\n";
        } else {
            push(@newruns, $irun);
        }
    }
 
    $result = "nada";
    if ($#newruns > -1) {
        $result = shift(@newruns);
    }

    print(&prefix("checkForNewRun"), " $#newruns runs, returning $result\n");
 
    return $result;
}


# ----------------------------------------------------------------------
sub copyDQMFilesToOnline() {
    ($run) = @_;
    my $srun = sprintf("%05d", $run);
    my $mergedFile = "$ROF/merged-dqm_histos_$srun.root";
    my $cmdString = "scp $mergedFile mu3e\@129.129.143.120:/home/mu3e/online/prompt/dqm_histos_$srun.root";
    system($cmdString);
}


# ----------------------------------------------------------------------
sub submitJobsRawMinalyzer() {
    ($run, $lcevts) = @_;
    my $pcrFile = "nada";

    my $DATASUBDIR = getDataSubdir($run);

    my $file = sprintf("$DATASUBDIR/run%05d.mid.lz4", $run);
    my $cmdString = "";
    my $envString = "";

    # -- adapt in case of mu3e reservations
    # my $queue = "-p 'mu3e --reservation=mu3e'";
    my $queue = "-p mu3e";
    # my $queue = "-p hourly";

    # -- rundir
    my $rundir = "$BASEDIR/slurm/jobs/mlzr/$run";
    if (-d $rundir) {
        # -- remove possibly pre-existing job directory
        system("/bin/rm -rf $BASEDIR/slurm/jobs/mlzr/old/$run");
        system("/bin/mv $rundir $BASEDIR/slurm/jobs/mlzr/old");
    }
    mkdir($rundir);
    # -- rootdir
    my $rootdir = "$BASEDIR/slurm/storage1/mlzr/$run";
    if (-d $rootdir) {
        # -- remove possibly pre-existing job directory
        system("/bin/rm -rf $BASEDIR/slurm/storage1/mlzr/old/$run");
        system("/bin/mv $rootdir $BASEDIR/slurm/storage1/mlzr/old");
    }
    mkdir($rootdir);
    print(&prefix("submitJobsRawMinalyzer"), "submitJobsRawMinalyzer rundir = $rundir, rootdir = $rootdir, file = $file\n");

    my $cmdIniString = "cd $rundir && ";
    $cmdIniString .= "$MU3EANCA/slurm/run $queue -t ../../../../slurm/$tarFile -c $MU3EANCA/run2025/scripts/slurm-analyzer.csh ";

    my $srunfile = sprintf("run%05d.mid.lz4", $run);

    # -- encode the configuration of the SLURM job
    $envString .= "'STORAGE1 $BASEDIR/slurm/storage1/mlzr";
    $envString .= "%DATADIR $DATASUBDIR";
    $envString .= "%MIDASFILE $srunfile";
    $envString .= "%RUN $run";

    # map ($slurmID => logfile)
    my %mSlurmIds;
    my @mergeFiles;
    my $NJOBS = int($lcevts/$nevts) + 1;
    print(&prefix("submitJobsRawMinalyzer"), "NJOBS: $NJOBS because lcevts = $lcevts, nevts = $nevts\n");
    # -- submit jobs
    for ($ijob = 0; $ijob < $NJOBS; $ijob++) {
        # FIXME DO NOT FORGET
        # last if ($ijob == 2);
        $job =  "$run" . "_$ijob";

        $gtString = "%GT $GT";

        $skipevts = $ijob * $nevts;
        if ($ijob < $NJOBS - 1) {
            $anlString  = "%ANLZR \"-s$skipevts -e$nevts\" '";
        } else {
            $anlString  = "%ANLZR \"-s$skipevts\" '";
        }

        $cmdString = $cmdIniString . "-r $envString$gtString$anlString " . "$job";

        print(&prefix("submitJobsRawMinalyzer"), "SLURM: STORAGE1 $BASEDIR/slurm/storage1/mlzr $gtString $anlString\n");
        print(&prefix("submitJobsRawMinalyzer"), "SLURM: $cmdString\n");
        if ($opt_d) {
            print(&prefix("submitJobsRawMinalyzer"), "DBX: $cmdString\n");
        } else {
            $line = `$cmdString`;
            # -- to see $line, uncomment the next line:
            # print($line);

            my @lines = grep /\S/, split /\n/, $line;

            my $slurmid = 0, $slurmout = "nada";
            foreach $ln (@lines) {
                if ($ln =~ /Submitted ->([0-9]*)<- with name \.*/) {
                    $slurmid = $1;
                }
                if ($ln =~ /batch submission: (\w*)/) {
                    $slurmout = $1;
                }
            }
            if ($slurmid > 0) {
                print(&prefix("submitJobsRawMinalyzer"), "SLURM job $slurmid -> $slurmout\n");
                $mSlurmIds{$slurmid} =  "tmp-$job/$slurmout.slurm.log";
                push(@mergeFiles, $job);
            }
        }
    }

    my $njobs = keys %mSlurmIds;
    if ($njobs < 1) {
        print(&prefix("submitJobsRawMinalyzer"), "ERROR no slurm job finished, something went wrong?!\n");
        return $pcrFile;
    }

    my $slurmids = "(";
    my $cnt = 0;
    foreach $ele (keys %mSlurmIds) {
        $slurmids .= $ele;
        $cnt++;
        if ($cnt < $njobs) {$slurmids .= ", ";}
    }
    $slurmids .= ")";
    print(&prefix("submitJobsRawMinalyzer"), "slurmids = $slurmids, sleep 30 second before looking at logfiles\n");
    sleep(30);

    # -- monitor jobs
    while ($njobs > 0) {
        if ($njobs > 20) {
            sleep(60);
        } elsif ($njobs > 10) {
            sleep(30);
        } else {
            sleep(10);
        }
        foreach $sjob (keys %mSlurmIds) {
            $result = `/bin/squeue -j $sjob`;
            if ($result =~ /Invalid job id specified/) {
                print(&prefix("submitJobsRawMinalyzer"), "SLURM job $sjob not found, probably hit time limit\n");
                delete($mSlurmIds{$sjob});
                $njobs = keys %mSlurmIds;
                next;
            }

            my @lines = grep /\S/, split /\n/, $result;
            my $le = @lines;
            my $tail = "no file yet\n";
            if (-e "$BASEDIR/slurm/jobs/mlzr/$run/$mSlurmIds{$sjob}") {
                $tail = `tail -1 $BASEDIR/slurm/jobs/mlzr/$run/$mSlurmIds{$sjob}`;
            }
            print("    [$sjob:$mSlurmIds{$sjob}] $tail");
            if ($tail =~ /This is the end, my friend/) {
                delete($mSlurmIds{$sjob});
                my $bla = $mSlurmIds{$sjob};
            }
            $njobs = keys %mSlurmIds;
        }
    }

    print(&prefix("submitJobsRawMinalyzer"), "all slurm jobs finished\n");

    $output = "$BASEDIR/slurm/storage1/mlzr";
    # my @resultFiles = ("pixel_histos", "fibre_histos", "tile_histos");
    my @resultFiles = ("dqm_histos_");
    foreach $file (@resultFiles) {
        my $srun = sprintf("%05d", $run);
        my $mergedFile = "$ROF/merged-$file$srun.root";
        system("/bin/rm -f $mergedFile");
        my $mergeString = "hadd $mergedFile";
        foreach $rf (@mergeFiles)  {
            $mergeString .= " $output/$run/root_output_files_$rf/$file$srun.root ";
        }

        if ($opt_d) {
            print(&prefix("submitJobsRawMinalyzer DBX"), $mergeString);
        } else {
            print(&prefix("submitJobsRawMinalyzer"), $mergeString);
            my $result = `$mergeString`;
            print("$result\n");
            print(&prefix("submitJobsRawMinalyzer"), "merged root file: $mergedFile\n");
        }
    }
    return $mergedFile;
}


# ----------------------------------------------------------------------
sub submitJobsRawTrirec() {
    ($run) = @_;
    my $pcrFile = "nada";

    my $DATASUBDIR = "$DATADIR/trirec/$VERSION";
    my $srunfile = sprintf("run%05d-sorted.root", $run);

    # -- check that sort file exists
    if (! -e "$DATASUBDIR/$srunfile") {
        print(&prefix("submitJobsRawTrirec"), "ERROR: sort file $DATASUBDIR/$srunfile does not exist\n");
        return $pcrFile;
    }

    my $cmdString = "";
    my $envString = "";



    # -- adapt in case of mu3e reservations
    # my $queue = "-p 'mu3e --reservation=mu3e'";
    # my $queue = "-p mu3e";
    my $queue = "-p hourly";



    # -- rundir
    my $rundir = "$BASEDIR/slurm/jobs/trirec/$run";
    if (-d $rundir) {
        # -- remove possibly pre-existing job directory
        system("/bin/rm -rf $BASEDIR/slurm/jobs/trirec/old/$run");
        system("/bin/mv $rundir $BASEDIR/slurm/jobs/trirec/old");
    }
    mkdir($rundir);
    # -- rootdir
    my $rootdir = "$BASEDIR/slurm/storage1/trirec/$run";
    if (-d $rootdir) {
        # -- remove possibly pre-existing job directory
        system("/bin/rm -rf $BASEDIR/slurm/storage1/trirec/old/$run");
        system("/bin/mv $rootdir $BASEDIR/slurm/storage1/trirec/old");
    }
    mkdir($rootdir);
    print(&prefix("submitJobsRawTrirec"), "submitJobsRawTrirec rundir = $rundir, rootdir = $rootdir\n");

    my $cmdIniString = "cd $rundir && ";
    $cmdIniString .= "$MU3EANCA/slurm/run $queue -t ../../../../slurm/$tarFile -c $MU3EANCA/run2025/scripts/slurm-trirec.csh ";

    my $cntCmd = "root -l -b -e 'TFile *f1 = TFile::Open(\"$DATASUBDIR/$srunfile\"); cout << mu3e->GetEntries() << endl;exit(0);'";
    my $cnt = `$cntCmd`;
    $cnt =~ s/root \[0\]//g;
    $cnt =~ s/\n//g;

    # -- encode the configuration of the SLURM job
    $envString .= "'STORAGE1 $BASEDIR/slurm/storage1/trirec";
    $envString .= "%SORTEDDIR $DATASUBDIR";
    $envString .= "%SORTEDFILE $srunfile";
    $envString .= "%RUN $run";

    # map ($slurmID => logfile)
    my %mSlurmIds;
    my @mergeFiles;
    my $lnevts = 2000000; 
    my $mcevts = $cnt;
    my $NJOBS = int($mcevts/$lnevts) + 1;
    print(&prefix("submitJobsRawTrirec"), "NJOBS: $NJOBS because lnevts = $lnevts, mcevts = $mcevts\n");
    # -- submit jobs
    for ($ijob = 0; $ijob < $NJOBS; $ijob++) {
        # FIXME DO NOT FORGET
        # last if ($ijob == 2);
        $job =  "$run" . "_$ijob";

        $gtString = "%GT $GT";

        $rootString = "%ROOTFILE trirec-run$job.root";
        $sortString = "%SORTEDFILE sorted-run$job.root";

        $skipevts = $ijob * $lnevts;
        if ($ijob < $NJOBS - 1) {
            $anlString  = "%ANLZR \"-s $skipevts -n $lnevts\" '";
        } else {
            $anlString  = "%ANLZR \"-s $skipevts\" '";
        }

        $cmdString = $cmdIniString . "-r $envString$gtString$rootString$sortString$anlString " . "$job";

        print(&prefix("submitJobsRawTrirec"), "SLURM: STORAGE1 $BASEDIR/slurm/storage1/trirec $gtString $anlString\n");
        print(&prefix("submitJobsRawTrirec"), "SLURM: $cmdString\n");
        if ($opt_d) {
            print(&prefix("submitJobsRawTrirec"), "DBX: $cmdString\n");
        } else {
            $line = `$cmdString`;
            # -- to see $line, uncomment the next line:
            # print($line);

            my @lines = grep /\S/, split /\n/, $line;

            my $slurmid = 0, $slurmout = "nada";
            foreach $ln (@lines) {
                if ($ln =~ /Submitted ->([0-9]*)<- with name \.*/) {
                    $slurmid = $1;
                }
                if ($ln =~ /batch submission: (\w*)/) {
                    $slurmout = $1;
                }
            }
            if ($slurmid > 0) {
                print(&prefix("submitJobsRawTrirec"), "SLURM job $slurmid -> $slurmout\n");
                $mSlurmIds{$slurmid} =  "tmp-$job/$slurmout.slurm.log";
                push(@mergeFiles, $job);
            }
        }
    }

    my $njobs = keys %mSlurmIds;
    if ($njobs < 1) {
        print(&prefix("submitJobsRawTrirec"), "ERROR no slurm job finished, something went wrong?!\n");
        return $pcrFile;
    }

    my $slurmids = "(";
    my $cnt = 0;
    foreach $ele (keys %mSlurmIds) {
        $slurmids .= $ele;
        $cnt++;
        if ($cnt < $njobs) {$slurmids .= ", ";}
    }
    $slurmids .= ")";
    print(&prefix("submitJobsRawTrirec"), "slurmids = $slurmids, sleep 30 second before looking at logfiles\n");
    sleep(30);

    # -- monitor jobs
    while ($njobs > 0) {
        if ($njobs > 20) {
            sleep(60);
        } elsif ($njobs > 10) {
            sleep(30);
        } else {
            sleep(10);
        }
        foreach $sjob (keys %mSlurmIds) {
            $result = `/bin/squeue -j $sjob`;
            if ($result =~ /Invalid job id specified/) {
                print(&prefix("submitJobsRawTrirec"), "SLURM job $sjob not found, probably hit time limit\n");
                delete($mSlurmIds{$sjob});
                $njobs = keys %mSlurmIds;
                next;
            }

            my @lines = grep /\S/, split /\n/, $result;
            my $le = @lines;
            my $tail = "no file yet\n";
            if (-e "$BASEDIR/slurm/jobs/trirec/$run/$mSlurmIds{$sjob}") {
                $tail = `tail -1 $BASEDIR/slurm/jobs/trirec/$run/$mSlurmIds{$sjob}`;
            }
            print("    [$sjob:$mSlurmIds{$sjob}] $tail");
            if ($tail =~ /This is the end, my friend/) {
                delete($mSlurmIds{$sjob});
                my $bla = $mSlurmIds{$sjob};
            }
            $njobs = keys %mSlurmIds;
        }
    }

    print(&prefix("submitJobsRawTrirec"), "all slurm jobs finished\n");

    $output = "$BASEDIR/slurm/storage1/trirec";

    my @resultFiles = ("trirec");
    foreach $file (@resultFiles) {
        my $srun = sprintf("%05d", $run);
        my $mergedFile = "$ROFTRIREC/run$srun-$file.root";
        system("/bin/rm -f $mergedFile");
        my $mergeString = "hadd $mergedFile";
        foreach $rf (@mergeFiles)  {
            $mergeString .= " $output/$run/$file-run$rf.root ";
        }
        print(&prefix("submitJobsRawTrirec"), "mergeString: $mergeString\n");
        if ($opt_d) {
            print(&prefix("submitJobsRawTrirec DBX"), $mergeString);
        } else {
            print(&prefix("submitJobsRawTrirec"), $mergeString);
            my $result = `$mergeString`;
            print("$result\n");
            print(&prefix("submitJobsRawTrirec"), "merged root file: $mergedFile\n");
        }
    }
    return $mergedFile;
}


# ----------------------------------------------------------------------
# -- this does no splitting!
sub submitJobsRawSort() {
    ($run) = @_;
    my $pcrFile = "nada";

    my $DATASUBDIR = getDataSubdir($run);

    my $file = sprintf("$DATASUBDIR/run%05d.mid.lz4", $run);
    my $cmdString = "";
    my $envString = "";

    # -- adapt in case of mu3e reservations
    # my $queue = "-p 'mu3e --reservation=mu3e'";
    my $queue = "-p mu3e";
    # my $queue = "-p hourly";

    # -- rundir
    my $rundir = "$BASEDIR/slurm/jobs/sort/$run";
    if (-d $rundir) {
        # -- remove possibly pre-existing job directory
        system("/bin/rm -rf $BASEDIR/slurm/jobs/sort/old/$run");
        system("/bin/mv $rundir $BASEDIR/slurm/jobs/sort/old");
    }
    mkdir($rundir);
    # -- rootdir
    my $rootdir = "$BASEDIR/slurm/storage1/sort/$run";
    if (-d $rootdir) {
        # -- remove possibly pre-existing job directory
        system("/bin/rm -rf $BASEDIR/slurm/storage1/sort/old/$run");
        system("/bin/mv $rootdir $BASEDIR/slurm/storage1/sort/old");
    }
    mkdir($rootdir);
    print(&prefix("submitJobsRawSort"), "submitJobsRawSort rundir = $rundir, rootdir = $rootdir, file = $file\n");

    my $cmdIniString = "cd $rundir && ";
    $cmdIniString .= "$MU3EANCA/slurm/run $queue -t ../../../../slurm/$tarFile -c $MU3EANCA/run2025/scripts/slurm-sort.csh ";

    my $srunfile = sprintf("run%05d.mid.lz4", $run);

    my $anlString = "--conf trirec_twolayer_cosmic.conf";

    # -- encode the configuration of the SLURM job
    $envString .= "'STORAGE1 $BASEDIR/slurm/storage1/sort";
    $envString .= "%DATADIR $DATASUBDIR";
    $envString .= "%MIDASFILE $srunfile";
    $envString .= "%RUN $run";
    $envString .= "%ANLZR \"$anlString\"";

    # map ($slurmID => logfile)
    my %mSlurmIds;
    my @mergeFiles;
    my $NJOBS = 1;
    print(&prefix("submitJobsRawSort"), "NJOB: $NJOBS\n");
    # -- submit job
    for ($ijob = 0; $ijob < $NJOBS; $ijob++) {
        # FIXME DO NOT FORGET
        # last if ($ijob == 2);
        $job =  "$run" . "_$ijob";

        $gtString = "%GT $GT";

        $rootString = "%ROOTFILE trirec-run$job.root";
        $sortString = "%SORTEDFILE sorted-run$job.root ' " ;

        $cmdString = $cmdIniString . "-r $envString$gtString$rootString$sortString " . "$job";

        print(&prefix("submitJobsRawSort"), "SLURM: STORAGE1 $BASEDIR/slurm/storage1/sort $gtString $anlString\n");
        print(&prefix("submitJobsRawSort"), "SLURM: $cmdString\n");
        if ($opt_d) {
            print(&prefix("submitJobsRawSort"), "DBX: $cmdString\n");
        } else {
            $line = `$cmdString`;
            # -- to see $line, uncomment the next line:
            # print($line);

            my @lines = grep /\S/, split /\n/, $line;

            my $slurmid = 0, $slurmout = "nada";
            foreach $ln (@lines) {
                if ($ln =~ /Submitted ->([0-9]*)<- with name \.*/) {
                    $slurmid = $1;
                }
                if ($ln =~ /batch submission: (\w*)/) {
                    $slurmout = $1;
                }
            }
            if ($slurmid > 0) {
                print(&prefix("submitJobsRawSort"), "SLURM job $slurmid -> $slurmout\n");
                $mSlurmIds{$slurmid} =  "tmp-$job/$slurmout.slurm.log";
                push(@mergeFiles, $job);
            }
        }
    }

    my $njobs = keys %mSlurmIds;
    if ($njobs < 1) {
        print(&prefix("submitJobsRawSort"), "ERROR no slurm job finished, something went wrong?!\n");
        return $pcrFile;
    }

    my $slurmids = "(";
    my $cnt = 0;
    foreach $ele (keys %mSlurmIds) {
        $slurmids .= $ele;
        $cnt++;
        if ($cnt < $njobs) {$slurmids .= ", ";}
    }
    $slurmids .= ")";
    print(&prefix("submitJobsRawTrirec"), "slurmids = $slurmids, sleep 30 second before looking at logfiles\n");
    sleep(30);

    # -- monitor jobs
    while ($njobs > 0) {
        if ($njobs > 20) {
            sleep(60);
        } elsif ($njobs > 10) {
            sleep(30);
        } else {
            sleep(10);
        }
        foreach $sjob (keys %mSlurmIds) {
            $result = `/bin/squeue -j $sjob`;
            if ($result =~ /Invalid job id specified/) {
                print(&prefix("submitJobsRawSort"), "SLURM job $sjob not found, probably hit time limit\n");
                delete($mSlurmIds{$sjob});
                $njobs = keys %mSlurmIds;
                next;
            }
            my @lines = grep /\S/, split /\n/, $result;
            my $le = @lines;
            my $tail = "no file yet\n";
            if (-e "$BASEDIR/slurm/jobs/sort/$run/$mSlurmIds{$sjob}") {
                $tail = `tail -1 $BASEDIR/slurm/jobs/sort/$run/$mSlurmIds{$sjob}`;
            }
            print("    [$sjob:$mSlurmIds{$sjob}] $tail");
            if ($tail =~ /This is the end, my friend/) {
                delete($mSlurmIds{$sjob});
            }
            $njobs = keys %mSlurmIds;
        }
    }

    print(&prefix("submitJobsRawSort"), "all slurm jobs finished\n");

    $output = "$BASEDIR/slurm/storage1/sort";

    my @resultFiles = ("sorted");
    foreach $file (@resultFiles) {
        my $srun = sprintf("%05d", $run);
        my $mergedFile = "$ROFSORT/run$srun-$file.root";
        system("/bin/rm -f $mergedFile");
        my $mergeString = "cp $output/$run/$file-run$job.root $mergedFile";
        print(&prefix("submitJobsRawSort"), "mergeString: $mergeString\n");
        if ($opt_d) {
            print(&prefix("submitJobsRawSort DBX"), $mergeString);
        } else {
            print(&prefix("submitJobsRawSort"), $mergeString);
            my $result = `$mergeString`;
            print("$result\n");
            print(&prefix("submitJobsRawSort"), "merged root file: $mergedFile\n");
        }
    }
    return $mergedFile;
}