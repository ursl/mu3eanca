#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdlib>
#include <math.h>
#include <string>
#include <TH2.h>
#include "TROOT.h"
#include "TRint.h"
#include "TChain.h"
#include "TFile.h"
#include "TDirectory.h"
#include "TKey.h"
#include "TPaveText.h"
#include "TString.h"
#include "TRandom.h"
#include "TUnixSystem.h"
#include "TStyle.h"

#include <iterator>

#include "util.hh"

using namespace std;

// ----------------------------------------------------------------------
int main(int argc, char *argv[]) {

  // -- DECREPIT - use fedLinkMatrixMap instead!

  // -- simple print of LVDS links and global chipID 
  // -- after second it generates the code to initialize the map<int, vector<string>> 
  // -- to map for each global chipID to its three links

  // -- Check errors
  std::vector<int> n_links_per_feb = {36, 36, 27, 36, 27, 36, 36, 27, 36, 27};
  std::vector<int> n_links_vars_per_feb = {36*4 +2, 36*4 +2, 27*4 +2, 36*4 +2, 27*4 +2, 36*4 +2, 36*4 +2, 27*4 +2, 36*4 +2, 27*4 +2};
  // -- odbhist -e run06288.mid (NOT run06288.mid.lz4!)
  // -- then search sequentially for the names and copy-paste the values (remove the quotes)
  // -- ODB  midas::odb odb_pcls("/Equipment/PixelsCentral/Variables/PCLS");
  // -- 9304
  // std::vector<uint32_t> pcls = { 0x00000000, 0x00000024, 0xe6600001, 0x26f06460, 0x26cadd92, 0x00000252, 0xe6e00001, 0xf5133a94, 0x1063661e, 0x0000020b, 0xed200001, 0x34280959, 0x3426ad83, 0x000001ae, 0xeee00001, 0xd9e9842f, 0xc59d4083, 0x0000002b, 0xef200001, 0x2745b1ae, 0x27442cd7, 0x0000001b, 0xe8200001, 0xea52d085, 0x0edf9220, 0x00000016, 0xe1800000, 0x27a071dd, 0x279c48f7, 0x00000167, 0xe4000000, 0x27a3cdaf, 0x27a15027, 0x00000155, 0xe9000000, 0x27a2a696, 0x27a087cf, 0x00000153, 0xe1200001, 0x26cfea50, 0x087790d5, 0x000001f4, 0xe2a00001, 0x25d01c14, 0x1860fc92, 0x00000259, 0xeae00001, 0xb85ea58f, 0xa12d8a04, 0x0000017f, 0xec100001, 0xd6eef895, 0xe8fc4d2f, 0x000001a2, 0xef900001, 0x2853d3a4, 0x1f2a7e05, 0x000002c6, 0xed500001, 0x81ccf0b8, 0xcb92c286, 0x0000015a, 0xe4800000, 0x289393f8, 0xf8261c66, 0x00000000, 0xe2400000, 0x0d78c22f, 0x1dfd8f9b, 0x00000000, 0xe7800000, 0x967616ef, 0x8d47be2a, 0x00000600, 0xe2200001, 0x294bc3b0, 0x29343f6b, 0x00000121, 0xa9000000, 0x14bf5277, 0x0cb47ad1, 0x00000000, 0xe9a00001, 0x29317a32, 0x29262d16, 0x0000011f, 0xed800000, 0x29905b1d, 0x298d4a80, 0x00000a3e, 0xea000000, 0x2999fe01, 0x299555d2, 0x000009a2, 0xe5c00000, 0xb776c388, 0x7166cc10, 0x00000972, 0xeba00001, 0x2a0bdc95, 0x2a0a01b1, 0x000000e1, 0xe2600001, 0x3b959bbf, 0x3822bd3a, 0x000000de, 0xe1200001, 0x2a3cb7c7, 0x2a32032f, 0x00000101, 0xa7c00000, 0x088fd7bc, 0xfcbd735a, 0x00000000, 0xaa400000, 0x14ce0b83, 0x0ec26f6e, 0x00000000, 0xec400000, 0x00f9c5b4, 0x0683ecbf, 0x00000000, 0xab800000, 0x44f62f7b, 0xbed85b89, 0x00000000, 0xaf000000, 0x60272009, 0xc0615aad, 0x00000000, 0xaac00000, 0x01b2d386, 0x3e8e6fb5, 0x00000000, 0xa9800000, 0xcd6bc19c, 0x82b41fc4, 0x00000000, 0xa6000000, 0x06475dd1, 0x9df69d1f, 0x00000000, 0xa3800000, 0x14ff72ae, 0x14ff2c3c, 0x00000000, 0x00000001, 0x00000024, 0xea400000, 0xe30b01ec, 0x1e372632, 0x00000000, 0xe1100001, 0x660f8675, 0x4bd6063c, 0x0000017e, 0xe7900001, 0x22581d46, 0x2200075c, 0x000003d6, 0xea100001, 0x256bb41a, 0x254e9c22, 0x00000bdf, 0xe8900001, 0x52a84c03, 0x147c7f4f, 0x000010f2, 0xe2500001, 0x460616be, 0x412ed45d, 0x00000c0c, 0xe3700001, 0xd6711707, 0x57a46bb3, 0x00000180, 0xe4b00001, 0x22f6d9cb, 0x22f59f9f, 0x00000104, 0xe6300001, 0x6e76082a, 0x6e707042, 0x000001c4, 0xee800000, 0xd23db24b, 0xa90df509, 0x00000000, 0xe7d00001, 0xca7e6757, 0xdbd89e89, 0x000001f2, 0xe1400000, 0x32335bce, 0x4f6d7d68, 0x00000000, 0xe1100001, 0x23a3ab34, 0x23a24c63, 0x00000148, 0xe7d00001, 0x487dc073, 0x4f0f3a88, 0x00000120, 0xe4900001, 0x23a21760, 0x23a12e83, 0x0000013e, 0xe3400000, 0x23d40d0f, 0x69c82fda, 0x0000025c, 0xec800000, 0x84d744d4, 0xf9ffa7f5, 0x000000e6, 0xe4800000, 0x9108c713, 0x24227e2c, 0x00000000, 0xaf400000, 0x80c0263e, 0x5f228202, 0x00000000, 0xaa000000, 0xf508fc85, 0x6b95a6a5, 0x00000000, 0xab400000, 0x0afe4cb6, 0xde1a17b4, 0x00000000, 0xa8000000, 0x5d2385f8, 0x22aee595, 0x00000000, 0xa7800000, 0x53162770, 0x71c97ddb, 0x00000000, 0xa1800000, 0x5ad3d938, 0x9e1d087f, 0x00000000, 0xa6400000, 0x592049fb, 0xf5f17f2d, 0x00000000, 0xa9400000, 0xf936d300, 0x9e8332b3, 0x00000000, 0xad800000, 0x66e8debd, 0x66fa8093, 0x00000000, 0x80000000, 0x0d1ad7f0, 0x0d1ad7f1, 0x00000000, 0x83800000, 0x0d1ad7f3, 0x0d1ad7f4, 0x00000000, 0xa0400000, 0x98e7e041, 0xa6b341e1, 0x00000000, 0x80000000, 0x0d1ad7fc, 0x0d1ad7fd, 0x00000000, 0x80000000, 0x0d1ad801, 0x0d1ad801, 0x00000000, 0xaa800000, 0x0d1ad841, 0x0d1ad842, 0x00000000, 0x8d800000, 0x31f7d31e, 0x02ee0c30, 0x00000000, 0x80000000, 0x0d1ad84c, 0x0d1ad84d, 0x00000000, 0x80000000, 0x0d1ad850, 0x0d1ad851, 0x00000000, 0x00000002, 0x0000001b, 0xa6400000, 0x090ff787, 0xe57bcf8d, 0x00000000, 0xa4c00000, 0x3800a44f, 0x4a373b78, 0x00000000, 0xe6400000, 0x228eeb73, 0xc232f5b8, 0x00000000, 0xef300001, 0x50b283fa, 0x4a1766eb, 0x000015be, 0xe9b00001, 0x204e3af1, 0x1d8a347d, 0x000012e8, 0xe4700001, 0x5b813ac8, 0x4d6dd04b, 0x00001280, 0xe7000000, 0x20a5b3ab, 0x15ffee13, 0x00000016, 0xe6c00000, 0x20a86e37, 0x20a7563b, 0x00000024, 0xec800000, 0x63076681, 0x62f60aeb, 0x0000000e, 0xe5800000, 0xf058ff9f, 0x2e05bf0e, 0x00000000, 0xad000000, 0x07997a5e, 0xf0e508a6, 0x00000000, 0xab400000, 0x05a4b93a, 0xd1bc67d0, 0x00000000, 0xec400000, 0x92834b75, 0x88bc6400, 0x00000000, 0xa4800000, 0x094169b5, 0x094168bd, 0x00000000, 0xad000000, 0x601991a8, 0xb7f6b206, 0x00000000, 0xea400000, 0x3cd15887, 0x27ee1ab2, 0x00000000, 0xe4400000, 0x79197bed, 0x22c70ddf, 0x00000000, 0xa6000000, 0x080ae351, 0x056426f7, 0x00000000, 0xe1a00001, 0x202b0c60, 0x096a7924, 0x0000021a, 0xe5200001, 0xf2d7943a, 0xf2d2263e, 0x000001a0, 0xe7600001, 0x537c5324, 0x27a68671, 0x0000018d, 0xe5800000, 0x25ef9ee6, 0x25be9e2a, 0x00007037, 0xea500001, 0x214e5aad, 0x214c15e0, 0x00007e48, 0xe5100001, 0x66498b4b, 0x109f8f67, 0x0002e1ca, 0xe4020000, 0x11619879, 0x3618295f, 0x00000283, 0xe1000000, 0x21a7ff26, 0x21a70fcc, 0x00000289, 0xee000000, 0x201e6aff, 0x15a0bc6f, 0x0000035d, 0x00000003, 0x00000024, 0xe4a00001, 0xc2860152, 0xacbead96, 0x000001aa, 0xe9e00001, 0x2d69e6b7, 0x1ccac446, 0x0000016d, 0xed200001, 0x2ad582cb, 0x271de053, 0x000001af, 0xe2900001, 0x7cfd1609, 0x5ef641ef, 0x000009e1, 0xe9900001, 0x3930adc4, 0xda5f9188, 0x0000031e, 0xe0100001, 0x1e0c8431, 0x1e0b2342, 0x000000ff, 0xe6200001, 0x1e5892b5, 0x1e56f94e, 0x0000024b, 0xec400000, 0x25619019, 0x5c6dda60, 0x00000000, 0xe6a00001, 0x22f4ad9b, 0x22e71288, 0x000001bf, 0xeb800000, 0x63664583, 0x3a8424dc, 0x00000000, 0xa0000000, 0xfda9ba93, 0xa975c4b9, 0x00000000, 0xa6400000, 0x13c859af, 0xefdc5eeb, 0x00000000, 0xa2400000, 0x02b95062, 0xe1e4ab3e, 0x00000000, 0xabc00000, 0x04ab13d6, 0xf82c62cb, 0x00000000, 0xaec00000, 0x39dc868c, 0xdeeb673a, 0x00000000, 0xe0200001, 0x1ea7e01a, 0x1ea5fa90, 0x0000003c, 0xeea00001, 0x1ea641c4, 0x1ea492e6, 0x0000004d, 0xeb800000, 0x1ea37d1d, 0x18458ebe, 0x00000000, 0xe4700001, 0x1cf76134, 0xa1f8a9f0, 0x00000155, 0xe2700001, 0x37cc7caa, 0xaf431841, 0x00000055, 0xe0300001, 0xde7e6142, 0xaad52fbc, 0x00000068, 0xe1c00000, 0x1f518dd7, 0x1e3bc4a8, 0x00000134, 0xef000000, 0x1f700c27, 0x1f69ac91, 0x000000bc, 0xed000000, 0x1f51cfd8, 0x1f505d3e, 0x000000ee, 0xeb300001, 0x1f9e8b6d, 0x1f9d3d0f, 0x0000073a, 0xef300001, 0x1fa250df, 0x1fa0869b, 0x000006df, 0xe9b00001, 0x1fa18180, 0x1f9f460c, 0x00000722, 0xee100001, 0x82ad3a82, 0x79b1b3ec, 0x00000f76, 0xea100001, 0x34a1bdd8, 0x349aa22a, 0x000013a3, 0xea900001, 0xf8820d0c, 0xe7c537d6, 0x00001234, 0xecd00003, 0x1db3f8bc, 0x260e17a8, 0x0000179b, 0xecd00001, 0xd0a97170, 0xb4b858a5, 0x00000f74, 0xef100001, 0x2c9e8a5f, 0x2c026df1, 0x00001f0c, 0xed400000, 0x013dcebf, 0xbd5f2739, 0x00000efd, 0xec800000, 0x208eafe3, 0x208cd567, 0x000010b5, 0xecc00000, 0xc75f7ad7, 0xf5f319e1, 0x00000f74, 0x00000004, 0x0000001b, 0xeca00001, 0x5cf69f7a, 0x378e8230, 0x00000fb7, 0xe5000000, 0x0a50721c, 0xbdfe6fa7, 0x00000000, 0xe3a00001, 0x35a18547, 0x359e2005, 0x000019aa, 0xe3100001, 0x36023964, 0x36007361, 0x00000064, 0xeed00001, 0x36007398, 0x3584af30, 0x00000042, 0xe0d00001, 0x33540ba8, 0x3369512c, 0x0000002f, 0xe8d00001, 0x03b85779, 0xfb85d57e, 0x0000135b, 0xe7900001, 0x3659d544, 0x361d7811, 0x00000dba, 0xea900001, 0x365933a5, 0x35f2e4b2, 0x00001614, 0xe4b00001, 0x62d6a564, 0x61bc00fd, 0x00000001, 0xe5400000, 0x3981a014, 0x41d6aa0a, 0x00000000, 0xe2800000, 0x9b6392af, 0x24b5de43, 0x00000000, 0xe2a00001, 0x5e7de881, 0x5e7bb755, 0x000005f1, 0xe2200001, 0x37077d3c, 0x36fce477, 0x000004e5, 0xee600001, 0x6b1483d6, 0xd569a2e5, 0x0000058f, 0xe6800000, 0x4e8a367a, 0x3c86d8d7, 0x0000096f, 0xef000000, 0x376d9ef6, 0x376b2cc8, 0x00001847, 0xe2400000, 0x14d38800, 0x1700cf8b, 0x00000e26, 0xe0e00001, 0x9261daac, 0x5092c63f, 0x0000367e, 0xec600001, 0x0e504898, 0x9ff9c68e, 0x000027b3, 0xe1200001, 0x37ad8825, 0x04fb22db, 0x000036c4, 0xa5400000, 0x93960a0b, 0x2ec0cff0, 0x00000000, 0xa7000000, 0xccb74ec9, 0x32ead3d7, 0x00000000, 0xa0000000, 0x529d18d9, 0x780a5030, 0x00000000, 0xe9400000, 0xc4307f5a, 0xab23965e, 0x00003831, 0xe3400000, 0x7a23921b, 0x7b10bb57, 0x0000336a, 0xe8000000, 0x3439a49a, 0x35272d7e, 0x00003a19, 0x00000005, 0x00000024, 0xe0000000, 0x04f3387c, 0x9244b315, 0x0000000f, 0xedc00000, 0xb25af380, 0x91c976fb, 0x0000001b, 0xea800000, 0x749210bd, 0xd560a3c4, 0x00000011, 0xe7300001, 0x5a00f1ca, 0x1b049fcf, 0x00003ea1, 0xe9b00001, 0x6b888a6f, 0x68a48b7b, 0x000030c0, 0xe1b00001, 0x592deb46, 0x5926b00a, 0x00002f10, 0xe0000000, 0x3eb06900, 0xd1e2a720, 0x0000021e, 0xe9400000, 0x35a0f7fb, 0x231be619, 0x00000000, 0xe5800000, 0x549f3379, 0x549d8f3d, 0x00000267, 0xee000000, 0x46daf356, 0x997177d3, 0x00000000, 0xe4100001, 0x5a8704d5, 0x5a85394b, 0x00000204, 0xe4900001, 0x5a84e2f4, 0x5a83e754, 0x00000299, 0xe4d00003, 0x5680266b, 0x5684d38a, 0x0000001e, 0xedd00001, 0x9e3c9cfc, 0xea77b8c0, 0x00000009, 0xec900001, 0x5a418d6d, 0x5a3faa2f, 0x00000007, 0xef700001, 0x98692f0e, 0x602ea95b, 0x00000013, 0xea700001, 0x78c6f4ec, 0x783a2e00, 0x00000005, 0xe0300001, 0xd0dd6b31, 0xc1c265e3, 0x00000013, 0xa5400000, 0x34ecacef, 0x07b31ce4, 0x00000000, 0xe4800000, 0xcd1b6ab3, 0xe514b938, 0x00000000, 0xaa800000, 0x27ce7df1, 0x4d8cbbc8, 0x00000000, 0xa0800000, 0xcd54042b, 0xe94ac485, 0x00000000, 0xad000000, 0x3a032e8a, 0x322ab125, 0x00000000, 0xa7400000, 0x388b0eb8, 0x122bcea5, 0x00000000, 0xe0c00000, 0xe0089db5, 0x7c435c3f, 0x00000000, 0xa0c00000, 0x917cc17c, 0xa2ff1376, 0x00000000, 0xeac00000, 0x9011e787, 0x18a2b223, 0x00000000, 0xe1000000, 0x5b803e9f, 0x5b7eccee, 0x00000000, 0xe8200001, 0x5b7dcbde, 0x5afad8c4, 0x00000005, 0xeba00001, 0x34c9c1d0, 0x34c848ce, 0x0000000d, 0xe6d00001, 0xf084d759, 0xcdc2bb36, 0x00000045, 0xea100001, 0x5b061296, 0x574f1852, 0x000002c9, 0xe6d00001, 0x56e71df7, 0x132e8d1c, 0x00000025, 0xee200001, 0x4ed171c0, 0x500f376d, 0x00000242, 0xea200001, 0x6091ee00, 0x5f3e5cb5, 0x00000227, 0xeea00001, 0x5ade3cd2, 0x5a559cc1, 0x000002c9, 0x00000006, 0x00000024, 0xa3800000, 0xfe003e42, 0x87a1e6f5, 0x00000000, 0xac000000, 0x2808521a, 0x28039bd7, 0x00000000, 0xadc00000, 0x217e5784, 0xc5ce7bbb, 0x00000000, 0xe9500001, 0x4a1f6669, 0x4a0ef8bf, 0x00000611, 0xe9100001, 0x4a15e76d, 0x4a14d325, 0x0000063b, 0xe9900001, 0x441bc720, 0x22a4607b, 0x00000469, 0xee000000, 0x49d09b2d, 0x49cde345, 0x00000018, 0xed000000, 0x23f46ac6, 0x32fbb77b, 0x00000021, 0xee000000, 0x49db0c86, 0x49d7427c, 0x0000000d, 0xe0200001, 0x4b1004cb, 0x47da45e4, 0x0000133f, 0xe3200001, 0x77dc604b, 0x42827a0f, 0x00001bde, 0xe3200001, 0x4b07bffb, 0x47f3cbc7, 0x000016c9, 0xe9c00000, 0x484d4018, 0x6ebdaa49, 0x00001307, 0xef800000, 0x4abb95a9, 0x4abaeb42, 0x000012e6, 0xe8400000, 0xbda80439, 0x4ddb26a7, 0x00000000, 0xe3000000, 0x4a2bbdb2, 0x3c865c9e, 0x00000998, 0xe8000000, 0x4a6b2240, 0x4a69e742, 0x00000b02, 0xed800000, 0x4a6a8cbe, 0x4a68468d, 0x00284919, 0xa0880000, 0x2807d46a, 0x27ef947e, 0x00000000, 0xaec00000, 0x27beb88f, 0xf73f244d, 0x00000000, 0xec400000, 0xef2f2014, 0x7644bb44, 0x00000000, 0xa1800000, 0x280859f5, 0x28083c59, 0x00000000, 0xe8400000, 0x66a6880a, 0x2cc4146e, 0x00000000, 0xa3000000, 0x27fbc623, 0x2233bfc7, 0x00000000, 0xac400000, 0x27e2aa11, 0x261aec7c, 0x00000000, 0xaa400000, 0x5b467f71, 0x46034e0f, 0x00000000, 0xafc00000, 0x280888e6, 0x27ffbc13, 0x00000000, 0xad000000, 0xf7768e4b, 0xa097785d, 0x00000000, 0xaa000000, 0x28086388, 0x28086385, 0x00000000, 0x80000000, 0x2808638c, 0x2808638d, 0x00000000, 0x80000000, 0x28086391, 0x28086391, 0x00000000, 0x80000000, 0x28086394, 0x28086394, 0x00000000, 0xa9000000, 0x28080ab7, 0x280450b8, 0x00000000, 0x80000000, 0x280863ac, 0x280863ad, 0x00000000, 0x80000000, 0x280863b0, 0x280863b1, 0x00000000, 0x80000000, 0x280863b4, 0x280863b5, 0x00000000, 0x00000007, 0x0000001b, 0xa8000000, 0x2c67bd11, 0x2c677d57, 0x00000000, 0xae800000, 0xe2a05e4d, 0x53733753, 0x00000000, 0xa9800000, 0xba804e6b, 0x85552665, 0x00000000, 0xab800000, 0x2276a2fd, 0xfdcee466, 0x00000000, 0xae800000, 0x82b1a699, 0xfe7b8980, 0x00000000, 0xa2c00000, 0x28d1d279, 0xf9c5c9bf, 0x00000000, 0xa4c00000, 0x2c04dddb, 0x26d26d62, 0x00000000, 0xaa000000, 0xa4d3b942, 0x6e4e12ce, 0x00000000, 0xaa400000, 0x2c3d8f1e, 0x279178fb, 0x00000000, 0xe3200001, 0x501c4141, 0x501b334e, 0x00000451, 0xe2600001, 0x4d1161ae, 0x3e7adcd2, 0x00000510, 0xeca00001, 0x57e0c069, 0x53cbef9f, 0x000003a8, 0xa2000000, 0xd3f5fdd4, 0xf824e73a, 0x00000000, 0xaec00000, 0x7774179b, 0xa4f0b110, 0x00000000, 0xe1400000, 0x7adc23cc, 0xc90e5760, 0x00000000, 0xe0300001, 0x4f7afbc7, 0x4f94bf6e, 0x00000693, 0xe3300001, 0xa88cdb85, 0xc380101c, 0x00000560, 0xe8b00001, 0x3dfe9beb, 0x3dfd9133, 0x00000570, 0xe9100001, 0x4e5b522d, 0xfe2ee26b, 0x000003a5, 0xe1100001, 0x7a0c4089, 0x69ba04e2, 0x000002fd, 0xe4d00001, 0x5a082a2a, 0x5842fca9, 0x000002e8, 0xe3600001, 0x4d2f6be9, 0xc8e26f2c, 0x00002c86, 0xeee00001, 0x50c885ee, 0x50c833e4, 0x0000503d, 0xe5c00000, 0x87254089, 0x74893596, 0x00000000, 0xe6b00001, 0x507c2df5, 0x507bac5b, 0x000002bf, 0xee300001, 0x507b1414, 0x5061f0aa, 0x000002dd, 0xe6b00001, 0xea75ad77, 0x79328be7, 0x000002cb, 0x00000008, 0x00000024, 0xe1000000, 0x46e05c42, 0xc5fce57a, 0x00000000, 0xed000000, 0x01a6ae20, 0x019f73b7, 0x0000001c, 0xe1400000, 0xecaa4086, 0xf6ad420a, 0x00000000, 0xe9900001, 0x037f2a7f, 0x0323934c, 0x0000002d, 0xe2900001, 0x038eab7e, 0x03391563, 0x00000020, 0xe2100001, 0x09e8f093, 0x084d3391, 0x0000001e, 0xe4200001, 0x114f957a, 0xb13cee1d, 0x00000132, 0xe8200001, 0x057d404c, 0x04c5d6b5, 0x000002d9, 0xe8a00001, 0x03633a36, 0x006dc05d, 0x000001d0, 0x89400000, 0xf00bbc6f, 0x96dcc42c, 0x00000000, 0xad800000, 0xfe43b62c, 0xaf57a611, 0x00000000, 0xe3000000, 0xf8c980f3, 0xfb433009, 0x00000000, 0xe0800000, 0x54fc2385, 0x54b528ac, 0x00000306, 0xe6100001, 0x02342823, 0x02327f26, 0x000002ca, 0xe6500001, 0x0737cf12, 0xfea11ea4, 0x00000297, 0xeab00001, 0x1acbf7c0, 0xf0151342, 0x000002e6, 0xee300001, 0x728e3bb2, 0x69900d50, 0x0000033f, 0xe9300001, 0x023dde96, 0x02293cc9, 0x00000335, 0xe0300002, 0x3ecc43ee, 0x34a9a0e5, 0x00000141, 0xe0b00001, 0xb84e1c7e, 0xee99a88d, 0x00000112, 0xe9200001, 0xaefe77d3, 0x753ce9c3, 0x000000e9, 0xe6000002, 0x02cd3e4b, 0x02cb4c66, 0x000000a4, 0xe2800000, 0x02cd0261, 0x02cb0fa1, 0x00000088, 0xec800000, 0x02ccc434, 0x02cb1aed, 0x000000b0, 0xe7000000, 0x8fadf55d, 0x796f91fe, 0x00000000, 0xef300001, 0x032a7bc3, 0x030be7e4, 0x00000014, 0xe8b00001, 0xc566f812, 0xb4ac3598, 0x00000021, 0xe3b00001, 0x4933d4b8, 0x368a258b, 0x000000e4, 0xef300001, 0x03086672, 0xbba85cf9, 0x000000b6, 0xe9300001, 0x040b52fc, 0x012773a6, 0x000000ea, 0xe4900001, 0x03c36933, 0x03c138c1, 0x00000092, 0xe5900001, 0x03c17372, 0x03bfbb5a, 0x00000144, 0xe6100001, 0x03c19be8, 0x03c00bfd, 0x0000008c, 0xe4000000, 0x0370b905, 0x036ee4e5, 0x000000ee, 0xe0800000, 0x0370e8e3, 0x036e5ef6, 0x00000125, 0xe1c00000, 0xc49db720, 0xcc8a4404, 0x00000144, 0x00000009, 0x0000001b, 0xe1c00000, 0x614e62c2, 0x5f995f97, 0x000000c1, 0xea000000, 0x3d767f0f, 0x3dafb2e8, 0x00000099, 0xea000000, 0x616b4378, 0x3ad94c40, 0x0000009e, 0xe0100001, 0x698e96b5, 0x686badb6, 0x00000067, 0xee100001, 0x6093ac8d, 0x605f05a1, 0x00000051, 0xef900001, 0xe2780487, 0x1d3f5dd1, 0x0000007d, 0xe8a00001, 0x60cac5c6, 0x60c970ae, 0x000000b4, 0xe9200001, 0x34a12d5b, 0x1769c034, 0x000000d4, 0xefa00001, 0x60d279d4, 0x60cebb2f, 0x00000106, 0xe5800000, 0xee4f2e1c, 0xc67b9a01, 0x00000096, 0xe6800000, 0x625c1979, 0x625a36aa, 0x000000d6, 0xe0800000, 0x625db5ab, 0x625c2525, 0x000000e9, 0xe7000000, 0x620f29d2, 0x620d6413, 0x00000014, 0xe1c00000, 0x789d2e85, 0x7447426a, 0x00000018, 0xea800000, 0x3c906ce1, 0x3c710e69, 0x0000000f, 0xe7a00001, 0x85c0a4d8, 0x7e85b020, 0x000001b4, 0xe5200001, 0x7d7f772f, 0x691ad0d0, 0x00000163, 0xefa00001, 0x613d930b, 0x616cecfd, 0x000001a7, 0xefb00001, 0x62fe7cc6, 0x6272b0ca, 0x000004db, 0xeeb00001, 0x41c2d576, 0x4059f5b9, 0x00000569, 0xe8600001, 0x92e4c771, 0x7208d3ff, 0x00000819, 0xefd00001, 0xbc67ecf8, 0x9d92c4ad, 0x00000178, 0xe0a00001, 0xdd7610d7, 0xe990f792, 0x00000178, 0xe6200001, 0x62ab5302, 0x61c574fc, 0x000000f9, 0xab800000, 0x4bd906ba, 0xe3f191a0 };
  // -- 6288
  std::vector<uint32_t> pcls = { 0x00000000, 0x00000024, 0xe8700001, 0x40ffbe4d, 0x5fa8d3c2, 0x000da8b1, 0xed7d0001, 0x88f56b38, 0x5c3171f6, 0x00078887, 0xe5370003, 0x53b058da, 0xb1218e3e, 0x00418f11, 0xe3310001, 0x69d87dcd, 0xee60a9e7, 0x00062e8b, 0xe9360001, 0x6403575a, 0x512a07ba, 0x0012bd8e, 0xe3f20001, 0x8a2d3029, 0x650652eb, 0x000a0c7a, 0xebea0001, 0x6bc30081, 0x7259cae9, 0x002a1be9, 0xe3ea0001, 0x26eff89b, 0xa182f58a, 0x000f4338, 0xe36f0001, 0x511d05fa, 0x7b1efe41, 0x00096496, 0xe3190001, 0x823b9bd4, 0x93891559, 0x000b1f99, 0xefdb0001, 0xd5b71ace, 0x3652609a, 0x00067fb4, 0xef160001, 0x2c947bcc, 0x7528cae1, 0x001157ed, 0xe9d10001, 0x4e5cdf32, 0x5b1149d4, 0x0008ba21, 0xef580007, 0x9884ae6f, 0x8e103426, 0x001cc973, 0xe35c0001, 0xdcacd911, 0x33c4cc67, 0x000f6dbf, 0xe78f0000, 0x2770cb1a, 0x30d6a37f, 0x0079eaca, 0xeb890000, 0xaaddb00d, 0xc5107032, 0x01a14c10, 0xe1410000, 0xc00a55b2, 0xa2be079c, 0x00040130, 0xe7f40001, 0xaf07026b, 0x3d738e24, 0x0001f9bd, 0xee010000, 0x205671b9, 0x4e4d9656, 0x00000000, 0xe9300001, 0x12de192d, 0x0f1af59a, 0x00023bcd, 0xef720001, 0xd4f6a70c, 0xc18b43b2, 0x000594c6, 0xea350001, 0xd25eaaed, 0xffc19d11, 0x0006a67a, 0xe0b60001, 0x60300ea2, 0x4f88a100, 0x00057fff, 0xeb150001, 0x4b468a8b, 0x4f03799e, 0x0003f3e8, 0xefd30003, 0x4b90ad39, 0xf8465d9d, 0x0003408e, 0xe8130001, 0x0d1ee67f, 0x8f94a1ce, 0x00039e5f, 0xa8830000, 0x1d630205, 0x6453b277, 0x00000000, 0xa7400000, 0xbf71f3bf, 0x746ea5e0, 0x00000000, 0xeac00000, 0xc074c6cc, 0xaa43d003, 0x00000000, 0xad400000, 0x5b7023d1, 0xd50da4bf, 0x00000000, 0xaa000000, 0x45c041f0, 0x482ff22b, 0x00000000, 0xa2800000, 0x8126fd6f, 0xd29c95d6, 0x00000000, 0xaa800000, 0x6126e175, 0xb54f727b, 0x00000000, 0xa8000000, 0x14de447b, 0xd440fd17, 0x00000000, 0xa7400000, 0x3493460f, 0x3479a170, 0x00000000, 0x00000001, 0x00000024, 0xe6800000, 0x07d27f24, 0x17f7ca9c, 0x00000000, 0xe3c00000, 0xc583e509, 0xbbcd0fc2, 0x00046f76, 0xed840000, 0xb73e3c8b, 0x8dd847a1, 0x000c8bdc, 0xe3ac0001, 0xc2f3561c, 0x6299cc36, 0x000541aa, 0xe8a50001, 0x7fdf33d6, 0xcdd713d1, 0x000e6971, 0xe6ee0001, 0x98765a79, 0xa62864ae, 0x00068126, 0xe2c60000, 0x230eed83, 0xee06fbbb, 0x0010054f, 0xe3000000, 0x6145f2c4, 0xa1ab7e0b, 0x0006b65c, 0xed460000, 0x8ed17f93, 0x5c5fae68, 0x000585a5, 0xeb650001, 0x2733a353, 0x79c8585c, 0x0005bf41, 0xe1a50001, 0x44d8b175, 0x91dcf05b, 0x000509ac, 0xe3450000, 0x498e6919, 0x702809b2, 0x00000000, 0xeda00001, 0x641b0b18, 0x015ccb61, 0x0005202d, 0xe9650001, 0x78e05f34, 0xb78cf281, 0x000f8310, 0xe62f0001, 0x728b39df, 0x78fec020, 0x000673bb, 0xef660001, 0xb63a11f1, 0x0f1364c4, 0x000690ef, 0xe6260001, 0xd1c01f56, 0xc04fb64d, 0x0017553f, 0xe6870000, 0x7a09dea7, 0xf99910a1, 0x00000000, 0xe6200001, 0xf109ddf6, 0x52a3fcd9, 0x00059576, 0xe6e50001, 0x6f9ea192, 0xe8dbe663, 0x0005de25, 0xe9650001, 0x0958f3ff, 0x3bafc1c4, 0x0007d6fa, 0xea470000, 0x30ea369c, 0xdcf2ca79, 0x00000000, 0xe9e00001, 0xe1392313, 0x99c0a0e5, 0x000614a0, 0xe4a60001, 0x5e6e4283, 0x5b6d0d1f, 0x000582b0, 0xeef50001, 0x95e7ab4b, 0xb1320322, 0x00024eed, 0xe0720001, 0x1aa941bd, 0x3dc66889, 0x0001e2ff, 0xebf10003, 0x1c558309, 0x02897cde, 0x00020acd, 0x80020000, 0x1c3d9c5c, 0x1c3d9c5d, 0x00000000, 0xa4800000, 0xb39d0825, 0xc92c551c, 0x00000000, 0xae000000, 0x82034f9e, 0x3b40e47f, 0x00000000, 0xe4c00000, 0x78f63550, 0xcaf9b1a6, 0x00000000, 0xaec00000, 0xeac1605b, 0xce311525, 0x00000000, 0xa4400000, 0x7a08ced9, 0x54976a59, 0x00000000, 0xa2800000, 0xcd3a2a02, 0xca36ec6d, 0x00000000, 0xa8800000, 0x389cb148, 0xdd853ed8, 0x00000000, 0x80000000, 0x1c3d9c7c, 0x1c3d9c7d, 0x00000000, 0x00000002, 0x0000001b, 0xac800000, 0x08bfe186, 0x4f0f5fe6, 0x00000000, 0xef800000, 0x10f3a436, 0x651a1618, 0x00000000, 0xed000000, 0x78366302, 0xb689a211, 0x00000000, 0xe3200001, 0xbc81a4b8, 0xd7188f3e, 0x0005b846, 0xe5250001, 0xaa03e1cb, 0x71ca0ce1, 0x00061c30, 0xefe60001, 0x6269c83a, 0xde71d3f0, 0x0005e255, 0xe6250001, 0x07dc86fe, 0xac091638, 0x0002f0c3, 0xe2e20001, 0xfa2909d3, 0xb68c93f8, 0x0002992b, 0xe1e20001, 0xf5295f45, 0xaf7253f6, 0x0002ac82, 0xeec20000, 0x6317d34e, 0x12681ee4, 0x00000000, 0xac800000, 0x4e610f16, 0xef049aed, 0x00000000, 0xa7000000, 0x85903234, 0x3aabd74c, 0x00000000, 0xe9400000, 0xf3a02232, 0xd4574c72, 0x00000000, 0xaac00000, 0x17250786, 0x172415b5, 0x00000000, 0xa6400000, 0xf01a4fea, 0x168c562a, 0x00000000, 0xa7c00000, 0x0b133f9d, 0x23457fb7, 0x00000000, 0xeb800000, 0x502e5fb4, 0xe5f68951, 0x00000000, 0xadc00000, 0xc49bbbc2, 0x3713193c, 0x00000000, 0xe4b00001, 0x30de6fad, 0x54633f82, 0x0004d48e, 0xe4b40001, 0xff805372, 0x7908731e, 0x00354129, 0xe7b50001, 0x47e24b82, 0x50a21203, 0x0006457c, 0xe7f60001, 0x5b7100af, 0x2be4fe36, 0x00054bff, 0xe0c50000, 0x60bd0e77, 0x28f624e9, 0x0008803f, 0xe0880000, 0xc6db96b1, 0x44c2d7d4, 0x0005d2e8, 0xec750001, 0x4ea80617, 0x129d2122, 0x0006fc36, 0xe0760001, 0xcf75cbe6, 0x9fed4408, 0x0005e27d, 0xea750001, 0x8b276c7b, 0x14fd5f8e, 0x00053445, 0x00000003, 0x00000024, 0xe5b40001, 0x26dd8b4e, 0xd88663d9, 0x00040b5e, 0xecf40001, 0x72d8ce8c, 0xb987d9ae, 0x0003bb94, 0xe0f30001, 0x1034a5e4, 0xbe6214e2, 0x000a0c46, 0xe0ca0000, 0xa23e24de, 0x19d98cd0, 0x0004b6e3, 0xe3040000, 0xc072b016, 0x100b865d, 0x00091026, 0xee490000, 0xc0fb4f9c, 0xa0961611, 0x00048c64, 0xe4b40001, 0xd4f8afaf, 0x940a850d, 0x0008d975, 0xee480000, 0x96034c08, 0xe6417174, 0x00000000, 0xe5700001, 0x4fa6b3ba, 0x41dd40b5, 0x00049563, 0xe4c40000, 0x3ae4fa93, 0x65d00c02, 0x00000000, 0xac400000, 0x698cdc8d, 0x8d7e77fa, 0x00000000, 0xe3c00000, 0xf7b9fefb, 0x19667f51, 0x00000000, 0xa7400000, 0x9012128a, 0xb31fed88, 0x00000000, 0xac000000, 0x12845db1, 0x2f9f8997, 0x00000000, 0xeb000000, 0x91d903c0, 0xe2f44245, 0x00000000, 0xe7000000, 0x4e701d6d, 0xfd6b6dce, 0x00045bce, 0xed840000, 0x35eff77c, 0xd9e5709a, 0x0004bacc, 0xee040000, 0x66c4237e, 0xe6e8dd8b, 0x00000000, 0xee700001, 0x659878a3, 0x2b8cbbac, 0x0000e619, 0xe4300001, 0xe5b703d9, 0xb42f8bce, 0x0000ddc2, 0xe2300001, 0xd2440d2f, 0xfa7863ca, 0x0000ee94, 0xec400000, 0xd4de3ae9, 0x01c7d8f0, 0x00014a65, 0xe5410000, 0xd587d107, 0xa9266d6b, 0x00018201, 0xe5010000, 0xd57cfed0, 0xa656ad5d, 0x00016802, 0xee310001, 0x885d0472, 0x74576641, 0x0004067b, 0xe6740001, 0x94203c12, 0x85e8d8be, 0x00039ff8, 0xe9f30001, 0x90502c96, 0x7bb719cd, 0x00039492, 0xe3b30001, 0xeb3c0f0e, 0x641e60a6, 0x000359c0, 0xed330001, 0x3e0224c7, 0x422428af, 0x00039d85, 0xe6f30001, 0x5fb346b6, 0x2c81c466, 0x0003423e, 0xe5330001, 0xfba3acec, 0xd08d9b3b, 0x0004079b, 0xe8f40001, 0x21d203e4, 0x75c3a92d, 0x00047617, 0xe7340001, 0x7677cd43, 0x48d5975b, 0x000543db, 0xe6050000, 0x5fcd0684, 0x7bdd4485, 0x0004d405, 0xed040000, 0xfc66a02f, 0xc67f976b, 0x0004a337, 0xe2440000, 0xc13c8b42, 0x16fd5402, 0x00047617, 0x00000004, 0x0000001b, 0xe8200001, 0x0f320c1a, 0xa1838a91, 0x0004c096, 0xe5040000, 0x92fcfda6, 0x26b00274, 0x00000000, 0xe4600001, 0x5b25649b, 0x2b3ec339, 0x00067553, 0xe3260001, 0x8db13689, 0x36cbbdfa, 0x0001d7f3, 0xea610001, 0x6579d6a5, 0x1b3c641a, 0x000202f4, 0xe9e20001, 0x5827ad87, 0x8bf3ab56, 0x0001fa92, 0xe7f10001, 0x641b3121, 0xbc505b80, 0x00068a28, 0xe3f60001, 0xac869f5d, 0x935a6de6, 0x00063038, 0xe8760001, 0x8088c265, 0x0ea0b9b8, 0x0005cdac, 0xeb050000, 0xe7a04430, 0xf0c71125, 0x00000000, 0xe0800000, 0xc567eccc, 0x76519522, 0x00000000, 0xea700001, 0xa9fdb806, 0xbaa3a0be, 0x00000001, 0xe1100001, 0x5f57ee14, 0x4e83f26c, 0x0003e8a8, 0xe9d30001, 0x95d5517e, 0x8865dbf4, 0x00041d58, 0xe0540001, 0x5b6ae133, 0x784ee65e, 0x0004d5cb, 0xe9440000, 0xc5e230a3, 0x53443822, 0x0005bcb3, 0xe3450000, 0xcafb5604, 0xb7baab67, 0x0008ff1f, 0xe7c80000, 0x1c5eb82b, 0xbc30420a, 0x00059f16, 0xe695003a, 0x1e401528, 0xa1dc7211, 0x0008b65d, 0xe058001a, 0xdd4b2138, 0x1176d14c, 0x00067c96, 0xe3d60013, 0xa80a0dcf, 0xfec88f50, 0x0007d5f8, 0xa7c70000, 0x5efc8f8f, 0x1e91bd1b, 0x00000000, 0xae800000, 0x81cd4da8, 0x77fe1d99, 0x00000000, 0xa2000000, 0xd4ebac1e, 0x6ed2f74f, 0x00000000, 0xe600000f, 0x22cee7fe, 0xa8985297, 0x000ac574, 0xe9ca000d, 0x54c78cdd, 0x3c79bd8c, 0x000770f8, 0xe2870000, 0x1ea1cdb3, 0x10201f0e, 0x00067b5e, 0x00000005, 0x00000024, 0xe5460000, 0x06b16380, 0x65a73257, 0x0004a602, 0xe5440000, 0xd55d171f, 0x6d2ba51d, 0x000415ce, 0xe7c40000, 0x7fd7ec0b, 0x9607909d, 0x0003f91b, 0xeeb30001, 0x448487ec, 0x413a44fd, 0x0006f69d, 0xe6360001, 0xff7217fc, 0x80e4ac15, 0x00065204, 0xe4b60001, 0x4ced9f5b, 0xa4b1e54e, 0x00079cf0, 0xebf70001, 0x0faa8bb2, 0x25de7671, 0x0008a458, 0xea480000, 0xe9c62548, 0xa9ebb6d1, 0x00000000, 0xeb700001, 0xc9f9b47a, 0x452c2049, 0x00082c71, 0xec080000, 0x603e5255, 0x7c2b8298, 0x0005ba5e, 0xe1450000, 0x4dc68bad, 0xb06c289c, 0x0005310c, 0xe9050000, 0x628878f5, 0xb696d7ce, 0x0005054b, 0xea350001, 0x98d0a300, 0x759a662f, 0x0005b845, 0xedf50001, 0x0f8c5469, 0x2613bd19, 0x0005d792, 0xe9f50001, 0xa2ced209, 0xa200813a, 0x00064aaa, 0xe9260001, 0x864b3f7f, 0x01452fca, 0x000618d0, 0xe8260001, 0x966b3256, 0xeeaf70d8, 0x00073391, 0xe1670001, 0x168acfe4, 0x9ab8c1a9, 0x0006a7cf, 0xa3c60000, 0xf93b032a, 0x83b5e7a1, 0x00000000, 0xee000000, 0xc329b061, 0x3c4452b7, 0x00000000, 0xa8c00000, 0xebb8e23a, 0x13387197, 0x00000000, 0xa0c00000, 0x6fee16c7, 0xc37ecdc3, 0x00000000, 0xaa000000, 0x824b2133, 0xb50770ea, 0x00000000, 0xa4800000, 0x6e8a62a8, 0x8b272aec, 0x00000000, 0xe9400000, 0x6b2e5695, 0x00ba7c1a, 0x00000000, 0xafc00000, 0x6ea0eb34, 0xf460cfdc, 0x00000000, 0xa7400000, 0xb1a0f76f, 0x70b4047e, 0x00000000, 0xe7c00000, 0x8034a0f9, 0x72ba9bcf, 0x00000000, 0xed300001, 0x7562840d, 0x2622d6b2, 0x00001196, 0xe7700001, 0x5a6f7632, 0xb0c0d309, 0x00000f23, 0xe9400000, 0xb32318f6, 0x9285fde7, 0x0005ba67, 0xef850000, 0x8f2d4af1, 0xbd60910d, 0x0006cf87, 0xe3c60000, 0xf10705f4, 0x42fb7a5c, 0x0005529f, 0xe6e50001, 0xdebb2ff8, 0xe3e5879c, 0x0007a329, 0xe2670001, 0xbe01bedb, 0xc81d4551, 0x00073a9c, 0xeea70001, 0xc551126b, 0xd08de43d, 0x0006cf87, 0x00000006, 0x00000024, 0xe8800000, 0x56af73dd, 0x9c4ba72e, 0x00000000, 0xa5800000, 0x29683c41, 0x633945c9, 0x00000000, 0xae000000, 0xb5ec9047, 0x0d20d602, 0x00000000, 0xefc0684a, 0x7e5571d8, 0x97788994, 0x0058ca93, 0xe34850ea, 0x3eba3747, 0x460d94c0, 0x0063b792, 0xe50346a1, 0x4fe9728a, 0x9509c2a2, 0x00585260, 0xe8e840d4, 0x16cee9d5, 0xde0fa401, 0x003ee6ff, 0xeaee5015, 0x6b1a6433, 0xfacbbfdd, 0x00390d12, 0xe8a9438a, 0xe8a516bb, 0xa6582cfc, 0x003884ee, 0xef884089, 0x5f082e6d, 0x2997cfce, 0x004ebd63, 0xe14e4d09, 0xf9679eb0, 0xc404d91e, 0x004e70f3, 0xe48e4f33, 0x2d06034c, 0x71edca48, 0x005ac1ab, 0xef0a5743, 0x5efac2e2, 0x054ca520, 0x004cfa40, 0xe80ce7b6, 0xa004ccbc, 0x0f842c76, 0x166b4446, 0xfacb0000, 0x5e4cb75d, 0x379f6fce, 0x00000000, 0xe5d05c55, 0x5b65aebd, 0x93839d73, 0x00410409, 0xee11566c, 0x36d4b125, 0xcf98e16e, 0x00454f1a, 0xec154ce8, 0xb1611293, 0x42c24cdb, 0x0041b5c4, 0xac810000, 0x7569304e, 0xf495fe56, 0x00000000, 0xa2000000, 0x72c56976, 0xc5a99310, 0x00000000, 0xe1400000, 0xd382ef2e, 0x62fe44cf, 0x00000000, 0xae000000, 0x848ded17, 0x848d6c6d, 0x00000000, 0xebc00000, 0x3db0c5e8, 0x422d20a3, 0x00000000, 0xad000000, 0x7acf2c1f, 0xe1131745, 0x00000000, 0xafc00000, 0x83ffb98b, 0x1fb8b791, 0x00000000, 0xed800000, 0xa92fccb4, 0xecf3b371, 0x00000000, 0xafc00000, 0x84582c98, 0x76669341, 0x00000000, 0x80000000, 0x848c7405, 0x848c7406, 0x00000000, 0x82c00000, 0x848c73f6, 0x848c73f7, 0x00000000, 0x80000000, 0x848c740d, 0x848c740e, 0x00000000, 0x80000000, 0x848c7411, 0x848c7412, 0x00000000, 0x80000000, 0x848c7415, 0x848c7417, 0x00000000, 0x80000000, 0x848c7489, 0x848c748a, 0x00000000, 0x80000000, 0x848c748d, 0x848c748e, 0x00000000, 0x80000000, 0x848c7491, 0x848c7492, 0x00000000, 0x80000000, 0x848c7495, 0x848c7496, 0x00000000, 0x00000007, 0x0000001b, 0xae800000, 0x7de3803e, 0x7d427231, 0x00000000, 0xaa000000, 0xa415fbb9, 0xe52b68b5, 0x00000000, 0xa1c00000, 0x2a2505da, 0x6f075197, 0x00000000, 0xa3c00000, 0x6e999498, 0x0e46bca4, 0x00000000, 0xa8000000, 0x303a8455, 0x7b893ac8, 0x00000000, 0xad000000, 0xc06996bd, 0x735c9d25, 0x00000000, 0xa2000000, 0x4c6230fa, 0xc56e09be, 0x00000000, 0xa8000000, 0x51af0cee, 0x18f2f85f, 0x00000000, 0xa4800000, 0x72aeb0e5, 0x8773a351, 0x00000000, 0xe2b00001, 0x148f60ba, 0xd7b3a49d, 0x000492b8, 0xecf40001, 0xbd70b5c6, 0x5366df14, 0x0003dbec, 0xe1f30001, 0x7dd8c0b3, 0xb86951f1, 0x0004110a, 0xa1c40000, 0xcdafe653, 0xc907e0a8, 0x00000000, 0xaa800000, 0x08127dda, 0xbb1a4eb6, 0x00000000, 0xe3800000, 0x833395c6, 0x258c0af7, 0x00000000, 0xe1d00001, 0x341fc72f, 0x539ee320, 0x00070bd3, 0xead70001, 0x27bcc5c8, 0x36ed0730, 0x0005df1a, 0xedd50001, 0x519f79ab, 0x45f48da5, 0x0005c67d, 0xe2750001, 0x42027091, 0x54bcaa6f, 0x0003a4eb, 0xe7b30001, 0x37d4e1fd, 0x9f0803dc, 0x00040b80, 0xee740001, 0x4654fc00, 0xaa123460, 0x00043525, 0xeb740001, 0x522d7169, 0x6aa08b3a, 0x00082e24, 0xefb80001, 0x0fcf5283, 0x6d4f076a, 0x00088313, 0xec080000, 0xc2eb3e94, 0x967d8cf8, 0x00000000, 0xef800000, 0xfa027648, 0xf35c4ae0, 0x000587ba, 0xe6c50000, 0x69adefa1, 0x4ac74264, 0x0004ff0d, 0xe5440000, 0xb61c6776, 0x0e76025b, 0x0004df40, 0x00000008, 0x00000024, 0xe7440000, 0xd48f30ef, 0x48cb1b65, 0x00000000, 0xe1500001, 0x8546a18a, 0x1d22f309, 0x0001edbb, 0xed810000, 0xf5d13622, 0x7fd2bf86, 0x00000000, 0xec200001, 0x65502ea3, 0xbe419f40, 0x0001964d, 0xe5210001, 0x575e6bd2, 0x62b61691, 0x0001a895, 0xe4210001, 0x5c5080b7, 0x5a10ec4e, 0x000179d2, 0xe4910001, 0x9595f781, 0xa7f87ffd, 0x00066c2d, 0xe6960001, 0x270723c4, 0xa30cdd7a, 0x0006881e, 0xe4960001, 0x3d889d0e, 0xd0398580, 0x00059d8e, 0xe1350001, 0x6c053034, 0xbe04bf2b, 0x00000001, 0xef800000, 0x5418f03c, 0xc9647850, 0x00000000, 0xe8c00000, 0x8e556d22, 0x23054a07, 0x00000000, 0xecd00003, 0xcf9837ee, 0x741f1353, 0x0004ff28, 0xee140001, 0x399abc93, 0xd9e326cc, 0x00051028, 0xef85000a, 0xb628cec2, 0x9dbae98c, 0x00055eeb, 0xeba50001, 0x50f5a9e7, 0x351016b7, 0x0004dcc4, 0xeda40001, 0xba83e86f, 0x7eb4500e, 0x000609dc, 0xea660001, 0x4232e310, 0x534c0de5, 0x0004e429, 0xe3d40001, 0x5f7e11eb, 0xb9796e34, 0x0003b33c, 0xea930001, 0xab1c716a, 0x3d445cc2, 0x00042662, 0xef140001, 0x5c83f4a7, 0x0680112d, 0x0003f589, 0xec030000, 0x68fa7a5c, 0xb939b4d1, 0x0004af06, 0xee440000, 0xcbbb4f8f, 0x68ca71a1, 0x0004832d, 0xe1c40000, 0x710211a8, 0xcc0278f3, 0x0005018c, 0xefc50000, 0xf0486bf1, 0xc2f18c6a, 0x00000000, 0xe6600001, 0x27d7000b, 0x732eb3a0, 0x00041756, 0xe3a40001, 0x405af132, 0xf5e6f804, 0x00042c75, 0xeb740001, 0x48ce769d, 0xccb0d0b0, 0x00041810, 0xe8740001, 0x261d3477, 0x5b4264c6, 0x0003ae8b, 0xea330001, 0xbf36c1fc, 0xf73c7d2d, 0x0003a220, 0xe7730001, 0x6dfecab2, 0x50725cb7, 0x0004a8d2, 0xed740001, 0xd39e43dc, 0x1200ea93, 0x00047c37, 0xe0740001, 0x309caaad, 0x876b16f4, 0x00048b6e, 0xe5d40001, 0x46606c44, 0x471f9c1a, 0x00051de4, 0xe3950001, 0x56efb180, 0x66863698, 0x0004c2f6, 0xee140001, 0x9004ef9a, 0x9c28e253, 0x00047c37, 0x00000009, 0x0000001b, 0xeef00001, 0xcb7f9f05, 0x7506150e, 0x0003da52, 0xecb30001, 0xd8ae4f43, 0x9628cd0b, 0x0003802e, 0xe3b30001, 0xc8ae9183, 0x22108ab8, 0x00036720, 0xe1f30001, 0xe11da8a7, 0x415929b8, 0x00047998, 0xe9f40001, 0x483f0485, 0x5cf6a589, 0x00044885, 0xe7740001, 0x766ba9f0, 0x579c6e52, 0x0004c6b2, 0xed640001, 0x10a30696, 0xc68a935a, 0x000524e4, 0xe4250001, 0xeb5a5bd0, 0xabe422a2, 0x00049928, 0xe6a40001, 0xe35780ca, 0xc13c6261, 0x0004d364, 0xe3f40001, 0xaf150cb1, 0x6cd4a4bf, 0x0004681f, 0xe9040000, 0x481db283, 0x24dbfd6c, 0x00037f38, 0xeef30003, 0xdb32a3d7, 0x8262aaaf, 0x00104faa, 0xe0a00003, 0xbba4213f, 0x4a9e973c, 0x0003e960, 0xe5b30001, 0x21a77a6d, 0xee1b758f, 0x0003dcc1, 0xefa30001, 0x15b8fa92, 0x32e21707, 0x000416d0, 0xecb40001, 0x03653744, 0xd6eeae5d, 0x00050dc6, 0xedf50001, 0x463ac992, 0xde1b0d5e, 0x0005ba3c, 0xec750001, 0x56a7e3d1, 0x22b64794, 0x00052126, 0xefd50001, 0x92644d7f, 0xf0184c7b, 0x0003af54, 0xe4130001, 0xe22ba1d3, 0x802868a9, 0x00040a76, 0xe2540001, 0xed2d08ed, 0x98af7800, 0x000394d2, 0xe6830000, 0x44436261, 0x6dac5cf9, 0x0004ad0e, 0xe5440000, 0xd0283b56, 0x608adad0, 0x0004945d, 0xed440000, 0x9468a021, 0x4047655c, 0x0004de24, 0xec640001, 0x4c530c3b, 0x17d98f17, 0x00051cd2, 0xed650001, 0x62a72c67, 0x11742ce6, 0x00049039, 0xeea40001, 0xddbeb372, 0x8582068b, 0x0004c7a2};

  //get chip list from link mask
  // -- ODB midas::odb odb_link_mask("/Equipment/LinksCentral/Settings/LVDSLinkMask");
  // -- 9304 
  //  std::vector<uint64_t> link_masks = {0x0000000007f67fff, 0x000000000001f5fe, 0x0000000007fc01f8, 0x0000000ffffd817f, 0x00000000071ffffd, 0x0000000ff003fd7f, 0x000000000003bff8, 0x00000000077f8e00, 0x0000000ffefff1fa, 0x0000000000ffffff, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000};
  // -- 6288
  std::vector<uint64_t> link_masks =     {0x0000000007f7ffff, 0x0000000007ddf7fe, 0x0000000007fc01f8, 0x0000000ffffd817f, 0x00000000071ffffd, 0x0000000ff003ff7f, 0x000000000003bff8, 0x00000000077f8e00, 0x0000000ffefffffa, 0x0000000007ffffff, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000};

  map<int, vector<string>> theBigMap;

  int offset = 0;
  int offset_var = 0;
  for (size_t feb_n = 0; feb_n < n_links_per_feb.size(); ++feb_n) {
      int n_links = n_links_per_feb[feb_n];
      for (int n_link = 0; n_link < n_links; ++ n_link) {
          int l = n_link*4 + 2 + offset_var + 2;
          int link_id = n_link + offset;
          if(l < static_cast<int>(pcls.size())) {
              uint32_t errors = pcls[l];
          }
          else {
              // An error will have already been printed in BeginRun, so don't print another one.
          }
      }
      offset += n_links;
      offset_var += n_links_vars_per_feb[feb_n];
  }
  std::vector<int> n_chips_per_feb = {12, 12, 9, 12, 9, 12, 12, 9, 12, 9};
  offset = 0;
  int offset_link = 0;
  bool skip_this = false;
  bool link_errors_found = false;
  std::map<int, int> n_not_working_links_per_chip;
  for (size_t feb_n = 0; feb_n < n_chips_per_feb.size(); ++feb_n) {
      cout << "FEB: " << feb_n << endl;
      uint64_t mask = link_masks[feb_n];
      int n_chips = n_chips_per_feb[feb_n];
      int n_links = n_chips*3; //TODO: this is only vertex!      
      for (int n_link = 0; n_link < n_links; ++ n_link) {
          int chip_confID = static_cast<int>((n_link/3)) +offset;
          if (chip_confID > 53) {//DS inversion
              int ladder_tmp = static_cast<int>(chip_confID/3);
              int chip_pos = 2 - (chip_confID%3);
              chip_confID = ladder_tmp*3 + chip_pos;
          }
          int chip_globID = chip_confID;
          //TODO: a function somewhere
          if (chip_confID < 108) {//Vertex
              int tmp_direction = static_cast<int>((chip_confID/54)); //0 = US, 1 = DS
              int tmp_in_direction = chip_confID%54; //within direction
              int tmp_layer = 0;
              int tmp_ladder = static_cast<int>((tmp_in_direction/3)); //ladder
              if (tmp_in_direction >= 24) { // layer 2
                  tmp_layer = 1;
                  tmp_ladder = static_cast<int>(((tmp_in_direction-24)/3));
              }
              int tmp_in_ladder = tmp_in_direction%3; //within a ladder
              chip_globID = tmp_layer*pow(2,10) + tmp_ladder*pow(2,5) + tmp_in_ladder + 1 +3*tmp_direction;
          }
          if (n_not_working_links_per_chip.find(chip_globID) == n_not_working_links_per_chip.end()) {
              n_not_working_links_per_chip[chip_globID] = 0;
          }
          theBigMap.insert({chip_globID, vector<string>()});
      }
      //Nasty double loop!
      for (int n_link = 0; n_link < n_links; ++ n_link) {
        int chipCnt(0);
        cout << "  link: " << n_link << "  " ;
          int chip_confID = static_cast<int>((n_link/3)) +offset;
          if (chip_confID > 53) {//DS inversion
              int ladder_tmp = static_cast<int>(chip_confID/3);
              int chip_pos = 2 - (chip_confID%3);
              chip_confID = ladder_tmp*3 + chip_pos;
          }
          int chip_globID = chip_confID;
          //TODO: a function somewhere
          if (chip_confID < 108) {//Vertex
              int tmp_direction = static_cast<int>((chip_confID/54)); //0 = US, 1 = DS
              int tmp_in_direction = chip_confID%54; //within direction
              int tmp_layer = 0;
              int tmp_ladder = static_cast<int>((tmp_in_direction/3)); //ladder
              if (tmp_in_direction >= 24) { // layer 2
                  tmp_layer = 1;
                  tmp_ladder = static_cast<int>(((tmp_in_direction-24)/3));
              }
              int tmp_in_ladder = tmp_in_direction%3; //within a ladder
              chip_globID = tmp_layer*pow(2,10) + tmp_ladder*pow(2,5) + tmp_in_ladder + 1 +3*tmp_direction;
              cout << "   global chipID: " << chip_globID << endl;
              string slinkname = Form("lvds/FEB_%02d/Link_%02d", feb_n, n_link);
              theBigMap[chip_globID].push_back(slinkname);

          }
      }

      offset += n_chips;
      offset_link += n_chips*3;
  }

  ofstream OF("linkMap.txt");
  OF << "  map<int, vector<string>> mLinksChipID = {" << endl;
  for (auto it = theBigMap.begin(); it != theBigMap.end(); ++it) {
    OF << "    {" << it->first << ", {";
    for (unsigned int il = 0; il < it->second.size(); ++il) {
      OF << "\"" << it->second[il] << "\"" << (il < it->second.size()-1? ", " : "");
    }
    if (std::next(it) != theBigMap.end()) {
      OF << "}}," << endl;
    } else {
      OF << "}}" << endl;
    }    
  }
  OF << "  };" << endl;
  OF.close();

}
