#!/usr/bin/env perl

# Usage:        run [-C] [-D dest] [-p short | standard | long] -c run.csh -t tarfile -m {debug|local|batch} [-b] -r {pattern1%pattern2}
# ------            [-x 'bin/runTreeReaders -r bmmReader -C cuts/bla.cuts'] *
#
# Examples:    run -t ../220318.tar.gz -c ~/mu3e/mu3eanca/slurm/slurm-mu3eSim.csh -r 'STORAGE1 /psi/home/langenegger/data/slurm/root%SITE T3_CH_PSI' run-test.mac
# ---------
#
#
# Assumptions: jobs are serialized a la asd_asd-asd-10000.mac, the numbering is at the end, separated with -
# ------------ is run in directory where the py files reside! ??? IS THIS TRUE ???
#
# 2022/03/09   migrated to merlin, removed grid stuff
# 2021/08/19   change -q to imply qsub. 'partition' (queue) is specified with -P. slurm is the default and -S is gone.
# 2020/01/15   change cn-test to t3
# 2019/10/24   add -w 200 to move runCont functionality into run
# 2019/10/23   wanted to change -l to produce a list of run commands (but failed to get the apostrophes)
# 2019/10/02   add '-S' to submit with slurm (-s is taken by runAll)
# 2018/01/15   re-introduced debug (= local but does not do any cleanup at the end of the run)
# 2016/10/12   add GlueCEPolicyMaxWallClockTime
# 2016/10/11   add GlueCEStateEstimatedResponseTime
# 2016/07/19   modify jdl creation and grid job submission
# 2016/07/18   -C now also submits new jobs (e.g. if new py files for a dataset have appeared)
# 2016/04/15   added -l old or -l new to run on old or new nodes
# 2016/04/05   added -b to run local jobs in the background
# 2013/01/21   changed default transfer method from srmcp to lcg-cp also for grid jobs
# 2010/12/10   bug fix: remove $https from jobs.list only for grid jobs
# 2010/06/18   added new option to control the CMSSW version
# 2010/06/15   added 'rm -rf $JOB' to start of batch job (in case the previously running job had been killed)
# 2010/05/10   added debug option to resubmission
# 2010/04/30   add V0-cms-$CMSSW to requirements and allow non-destination specific submission
# 2010/04/28   adapted to runTreeReaders usage, fixed wrong remove instructions
# 2010/04/27   changed '-d destination' to '-D destination'
# 2010/03/29   change default arguments for t3 batch srmcp
# 2010/03/18   change name, remove all traces of ursl, add batch job name to jobs.list
# 2010/03/09   translate XXXX in replacements into the correct number
# 2010/03/08   Add -C to submit only those which crashed in a previous attempt. Add also batch jobs to jobs.list.
# 2010/03/06   Changed separation character for -r list to %, added default settings to always be written into csh!
# 2010/03/05   STORAGE1 and input file location now provided as command line argument
# 2010/03/03   Added grid URL duplication into local and common jobs.list files
# 2010/03/02   First version that runs locally, in batch, on the grid.
#
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the
#
# Author    Urs Langenegger <urslangenegger@gmail.com>
# ----------------------------------------------------------------------

use Getopt::Std;
getopts('bCc:dl:L:m:p:qr:R:t:v:w:x:');

# -- User setup
my $siesta = 120;
my $user  = $ENV{'USER'};
my $home  = $ENV{'HOME'};
(my $uhome = $home) =~ s|[^/]+$||;
$uhome .= "langenegger";
if (!$opt_p) {
    $opt_p = "general";
}
my $sbatch = "/usr/bin/sbatch ";

# -- if continuous submission, provide information how to suspend/stop
if ($opt_w) {
    print "run($$):     $ARGV[0] .. $ARGV[$#ARGV]\n";
    print "to stop:     touch STOP.$$\n";
    print "to suspend:  touch WAIT.$$\n";
}

# -- define mode if not provided
if (!$opt_m) {
    $opt_m = "batch";
}

# -- Default settings
my $CMSSW = $ENV{'CMSSW_VERSION'};
if ($opt_v) {
    $CMSSW = $opt_v;
}

my $jobsList = "jobs.list";
if ($opt_L) {
    $jobsList = $opt_L;
}


# -- replacements
if ($opt_r) {$replace = $opt_r; }
@replaces = split(/%/, $replace);
if ($opt_x) {
    push(@replaces, "EXECUTABLE \"$opt_x\"");
}
print "Replacement list: \n";
foreach $repl (@replaces) {
    print "$repl\n"
}


# -- resource broker
my $rb = " ";
if ($opt_R) {
    $rb = "-r $opt_R";
}

my $host = `hostname`;
chop($host);

# -- split arguments into directory- and file-names
my $tarFile, $tarDirectory;
($tarDirectory, $tarFile) = fileAndDirectory($opt_t);
my $cshFile, $cshDirectory;
($cshDirectory, $cshFile) = fileAndDirectory($opt_c);

#print "***===> Name of csh file $cshDirectory $cshFile \n";

my $pwd = `pwd`;
chop($pwd);

# -- Make sure that the combined jobs.list exist
if (!(-e "../$jobsList")) {
    open(TMP, ">../$jobsList");
    print TMP "###Submitted Job Ids###\n";
    close(TMP);
}


# -- submit all job files
my $jobDirectory, $jobFile;
my $njobs = &countPending;
foreach $jobfile (@ARGV) {

    # -- runCont functionality!
    $datum = `date`;
    chop($datum);
    &checkUser($datum);
    if ($opt_w && ($njobs > $opt_w)) {
        $njobs = &countPending;
        $datum = `date`;
        chop($datum);
        print "run($$): $njobs jobs waiting at $datum\n";
        while ($njobs > $opt_w) {
            sleep($siesta);
            $datum = `date`;
            chop($datum);
            &checkUser($datum);
            $njobs = &countPending;
            $datum = `date`;
            chop($datum);
            print "run($$): $njobs jobs waiting at $datum\n";
        }
    }
    $njobs++;

    ($jobDirectory, $jobFile) = fileAndDirectory($jobfile);
    if ($jobDirectory =~ /^\//) {
    } elsif ($jobDirectory eq "") {
        $jobDirectory = "..";
    } else {
        $jobDirectory = "../".$jobDirectory;
    }

    # -- Cut off trailing mac/i extension
    #    $rest = substr($jobFile, 0, rindex($jobFile, '/')+1);
    #    $jobFile =~ s/$rest//;
    if ($jobFile =~ /\.i/) {
        ($job = $jobFile) =~ s/\.i//;
    } else {
        ($job = $jobFile) =~ s/\.mac//;
    }
    
    # -- Cut off everything except the number
    $number    = $job;
    $number = substr($job, rindex($job, '-')+1, length($job));

    $ENV{'JOB'}    = $job;

    $tdir = "tmp-$job";
    # -- Check whether the previous submission was successful
    if ($opt_C) {
        if (-d "$tdir") {
            if (-e "$tdir/NOK") {
                print "resubmitting $job\n";
                # -- remove old entry in $jobsList
                $https = `/bin/grep https $tdir/$jobsList`; chop($https);
                if ($opt_d) {
                    print "would remove from $jobsList: $tdir \n";
                    next;
                } else {
                    &remove("$jobsList", $tdir); # this will also remove the sge lines which contain $tdir
                }
            } else {
                next;
            }
        } else {
            print "submitting new job $job\n";
        }
    }

    # -- create tmp directory for running/submission
    system("/bin/rm -rf $tdir");
    mkdir($tdir);
    chdir($tdir);

    # -- create necessary scripts
    &makeCshFile($job, $jobFile);

    #print " --> /bin/cp $jobDirectory/$jobFile .\n";
    if (-e "$jobDirectory/$jobFile") {
        system("/bin/cp $jobDirectory/$jobFile .");
    } else {
        system("touch $jobFile");
    }
    
    if ($tarFile) {
        &makeTarLink($job);
    }
    system("/bin/chmod 755 $job.csh");

    # -- get a timestamp
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
    $year += 1900;
    $mon += 1;
    $timeStamp = sprintf("%s, %4i/%02i/%02i %02i:%02i:%02i", $host, $year, $mon, $mday, $hour, $min, $sec);

    if ($opt_m eq "local" || $opt_m eq "debug") {
        print "local running: $job.csh\n";
        if ($opt_d) {
            print("./$job.csh >& local.log\n");
        } else {
            if ($opt_b) {
                system("./$job.csh >& local.log &");
            } else {
                system("./$job.csh >& local.log");
            }
            open(IN, ">>$jobsList") || die "Cannot open $jobsList\n";
            print IN "###Submitted Job Ids###\n";
            print IN "local $tdir \n";
            print IN "\# $timeStamp $pwd/$tdir $host $host\n";
            close(IN);
            system("/usr/bin/tail -2 $jobsList >> ../$jobsList");
        }
    } elsif ($opt_m eq "batch") {
        print "batch submission: $job\n";
        $jobName = "$job.csh";
        if ($user eq "langenegger") { $jobName = `rline`; chop($jobName); }
        if ($opt_d) {
            print "$sbatch -J $jobName -o $pwd/$tdir/$job.slurm.log -e $pwd/$tdir/$job.slurm.err ./$job.csh\n";
        } else {
            my $queue = "-p $opt_p";
            if ($opt_p eq "mu3e") {
                $queue = "-p $opt_p -A mu3e";
            } 
            print "$sbatch -J $jobName $queue -o $pwd/$tdir/$job.slurm.log -e $pwd/$tdir/$job.slurm.err ./$job.csh\n";
            $result = `$sbatch -J $jobName $queue -o $pwd/$tdir/$job.slurm.log -e $pwd/$tdir/$job.slurm.err ./$job.csh`;
            chop($result);
            $result =~ s/Submitted batch job //g;
            print "Submitted ->$result<- with name ->$jobName<-\n";
            open(IN, ">>$jobsList") || die "Cannot open $jobsList\n";
            print IN "###Submitted Job Ids###\n";
            print IN "slurm $timeStamp $pwd/$tdir $jobName $result\n";
            close(IN);
            system("/usr/bin/tail -1 $jobsList >> ../$jobsList");

        }
    } 

    chdir("..");
}


# ----------------------------------------------------------------------
sub makeTarLink {
    ($ljob) = @_;
    if ($opt_t =~ /^\//) {
        system("/bin/ln -s $opt_t $ljob.tar.gz");
    } else {
        system("/bin/ln -s ../$tarDirectory/$tarFile $ljob.tar.gz");
    }
}



# ----------------------------------------------------------------------
sub makeCshFile {
    ($ljob, $ljobfile) = @_;
    if ($cshDirectory =~ /^\//) {
        open(IN, "$cshDirectory/$cshFile") || die "Cannot open $cshDirectory/$cshFile\n";
    } else {
        open(IN, "../$cshDirectory/$cshFile") || die "Cannot open ../$cshDirectory/$cshFile\n";
    }
    open(OUT, ">$ljob.csh")  || die "Cannot open $ljob.csh\n";
    my $datum = `/bin/date`; chop $datum;
    while (<IN>) {
        if (($opt_m eq "batch" || $opt_m eq "local" || $opt_m eq "debug") && /\# BATCH START/) {
            print OUT "# BATCH START\n";
            print OUT "mkdir -p /scratch/$user\n";
            print OUT "cd /scratch/$user\n";
            print OUT "ls -l /scratch/$user\n";
            print OUT "/bin/rm -rf \$JOB\n";
            print OUT "mkdir \$JOB\n";
            print OUT "cd \$JOB\n";
            if ($tarFile) {
                print OUT "/bin/cp $pwd/$tdir/$ljob.tar.gz .\n";
            }
            print OUT "/bin/cp $pwd/$tdir/$ljobfile .\n";
        }

        if (($opt_m eq "batch" || $opt_m eq "local" || $opt_m eq "debug") && /\# BATCH END/) {
            if ($opt_m eq "debug") {
                # do nothing!
            } else {
                print OUT "# BATCH END\n";
                print OUT "echo \"coming to an end\" \n";
                print OUT "pwd \n";
                print OUT "ls -l \n";
                print OUT "cd /scratch/$user\n";
                print OUT "/bin/rm -rf \$JOB\n";
                print OUT "pwd \n";
                print OUT "ls -l \n";
            }
        }

        foreach $repl (@replaces) {
            ($patt, $value) = split(/ /, $repl, 2);
            # FIXME: HERE ADD PARSING/REPLACING OF XXXX with $number!!!
            $value =~ s/XXXX/$number/g;
            if (/setenv $patt/) {
                s/$patt/$patt $value/g;
                last;
            }
        }

        if (/XXXX/) {
            s/XXXX/$number/g;
        } elsif (/setenv JOB/) {
            s/setenv JOB/setenv JOB      $ljob/g;
        } elsif (/#SBATCH -o/) {
            s/#SBATCH -o/#SBATCH -o $pwd\/$tdir\/$ljob.log/g;
        } elsif (/#SBATCH -e/) {
            s/#SBATCH -e/#SBATCH -e $pwd\/$tdir\/$ljob.err/g;
        }

        print OUT;
    }
    close OUT;

}


# ----------------------------------------------------------------------
sub fileAndDirectory {
    ($in) = @_;

    $dir = substr($in, 0, rindex($in, '/'));
    if (rindex($in, '/') < 0) { $dir = ""; }
    $file = substr($in, rindex($in, '/')+1, length($in));
    @result = ($dir, $file);
    return @result;
}


# ----------------------------------------------------------------------
sub remove {
    ($lfile, $lpat) = @_;
    rename("$lfile", "$lfile.old");
    open(IN, "$lfile.old");
    open(OUT, ">$lfile");
    while(<IN>) {
        unless (/$lpat/) { print OUT; }
    }
    close(IN);
    close(OUT);
}

# ----------------------------------------------------------------------
sub countPending() {
    $n = `squeue -u langenegger -t PENDING -h | wc -l `;
    chop($n);
    # print "n = ->$n<- \n";
    return $n;
}

# ----------------------------------------------------------------------
sub checkUser() {
    ($ldatum) = @_;
    # -- bail out in case of STOP file
    if (-e "STOP.$$") {
        unlink("STOP.$$");
        print "runCont($$): saw STOP.$$ at $ldatum, exit\n";
        exit(0);
    }
    # -- wait 1h in case of WAIT file
    while (-e "WAIT.$$") {
        $datum = `date`;
        chop($datum);
        print "runCont($$): watching WAIT.$$ at $ldatum\n";
        sleep(3600);
    }

}
