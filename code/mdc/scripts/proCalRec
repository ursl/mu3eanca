#! /usr/bin/perl

# ----------------------------------------------------------------------
# proCalRec
# =========
#
# Usage:       cd /psi/home/langenegger/data/mdc3-May2024
#              ~/mu3e/mu3eanca/mdc/scripts/proCalRec -t 240524-pcr.tar.gz
#
#
# Preparation: cd /psi/home/langenegger/data/mdc3-May2024
#              tar zcvf 240523-pcr.tar.gz --exclude .git --exclude mu3e/_build mu3e minalyzer
#
#
# History
#         2024/05/22 changes for MDC3-May2024: minalyzer, different locations
#         2023/08/31 test mu3e reservation (see below search for reservation)
#         2023/08/22 add IOV updating
#         2023/08/17 validated proper job splitting/validation/updates
#         2023/08/08 first shot
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the
#
# Author    Urs Langenegger <urslangenegger@gmail.com>
# ----------------------------------------------------------------------
use Cwd;
use File::Basename;

my $dir = getcwd;

use Getopt::Std;
getopts('dn:t:');

# ----------------------------------------------------------------------
# -- default values
# ----------------------------------------------------------------------
# -- PCR base directory for all scripts (git backed up)
my $pcrDir   = "/psi/home/langenegger/mu3e/mu3eanca/mdc";
# -- directory for minalyzer/trirec/vertex code (NOT git backed up)
my $pcrCodeDir   = "/data/user/langenegger/mdc3-May2024/";
# -- directory for calibration/CDB jobs (git backed up)
my $pcrCalCode   = "/psi/home/langenegger/mu3e/mu3eanca/db0/cdb2";
# -- base directory where jobs are submitted and all output will appear
my $pcrBaseDir   = "/data/user/langenegger/mdc3-May2024";
# -- source data directory on mu3ebe
my $pcrMu3eBEDir = ".ursl/data";
# -- target data directories on merlin
my $pcrDataDir   = "/data/experiment/mu3e/data/2024/datachallenge/data/raw";
my $pcrDataRecDir= "/data/experiment/mu3e/data/2024/datachallenge/data/rec";
# -- counting executable (used to be [min]alyzer)
my $pcrCounterExe= "mdump -j -x ";
# -- JSON CDB
my $pcrJsonDir   = "$pcrBaseDir/json";
# -- tarfile
#    create it with
#      merlin-l-002>pwd
#      /psi/home/langenegger/mu3e/mu3eanca/mdc2023
#      merlin-l-002>tar zhcvf ~/data/mdc2023/slurm/230913-analyzer.tar.gz --exclude .git analyzer mu3e

my $pcrTarFile   = "unset.tar.gz";
if ($opt_t) {
    my($barefile, $directories) = fileparse($opt_t);
    $pcrTarFile = $barefile;
}

if ($pcrTarFile eq "unset.tar.gz") {
    die("A tar file MUST be specified!\n");
}

print(&prefix("proCalRec"), "Tar file: $pcrTarFile\n");
# -- MIDAS file extension
my $midfext = "mid.lz4";

# -- initialize what has been processed so far
my @processedRuns;
&readProcessedRuns();

my $nevts = 5000; #FIXME
if ($opt_n) {
    $nevts = $opt_n;
}
print(&prefix("proCalRec"), "nevts: $nevts\n");

# ----------------------------------------------------------------------
# -- the loop
# ----------------------------------------------------------------------
while (1) {
    # -- should be migrated out
    # &pcrTransfer();
    # -- check whether something needs to be done
    my $run = &checkForNewRun();
    if ($run eq "nada") {
        print(&prefix("proCalRec"), "Nothing new ->$run<-\n");
        sleep(10);
        next;
    }
    print(&prefix("proCalRec"), "Now processing run $run\n");

    # -- count events in new file
    $cntEvts = &pcrCountEvents($run);
    #$cntEvts = 41440245;

    # -- submit analyzer jobs to slurm and merge output
    my $pcrrootfile =  &pcrSubmitJobsA($run, $cntEvts);
    # -- run local calibration
    if ($pcrrootfile eq "nada") {
        print(&prefix("proCalRec"), "pcrSubmitJobsA did not complete successfully\n");
    } else {
        &pcrRunCalibration($pcrrootfile);
    }

    # -- submit trirec job to slurm and merge output
    my $pcrrootfile =  &pcrSubmitJobsB($run, $cntEvts);

    # -- update $pcrBaseDir/proCalRec.runs
    open(OUT, ">>$pcrBaseDir/proCalRec.runs") || die "proCalRec: Cannot open $pcrBaseDir/proCalRec.runs\n";
    print OUT "$run\n";
    close(OUT);
    # -- update @processedRuns
    push(@processedRuns, $run);

}


# ----------------------------------------------------------------------
sub checkForNewRun() {
    my @midFiles  = glob("$pcrDataDir/*.$midfext");
    my @newruns = ();

    print(&prefix("checkForNewRun"), "contents of processedRuns: ");
    if ($opt_d) {
        foreach $irun (@processedRuns) {
            print(" $irun");
        }
    } else {
        print(" $#processedRuns runs (use -d to see full list)");
    }
    print("\n");

    foreach $file (@midFiles) {
        my($barefile, $directories) = fileparse($file);
        $barefile =~ /run([0-9]*).$midfext/;
        $run = $1;

        if (grep( /^$run$/, @processedRuns ) ) {
            # print "Found $run in processedRuns\n";
        } else {
            push(@newruns, $run);
        }
    }
    print(&prefix("checkForNewRun"), "New runs: ");

    foreach $irun (@newruns) {
        print(" $irun");
    }
    print("\n");

    $result = "nada";
    if ($#newruns > -1) {
        $result = shift(@newruns);
    }
    # print("checkForNewRun() return $result\n");

    return $result;
}


# ----------------------------------------------------------------------
sub pcrCountEvents() {
    ($run) = @_;
    my $file = sprintf("$pcrDataDir/run%05d.$midfext", $run);
    print(&prefix("pcrCountEvent"), "run = $run -> file = $file\n");

#   my $cmdString = "cd $pcrCodeDir/analyzer/_run && $pcrExe -c $file";
    my $cmdString = "$pcrCounterExe $file | /bin/grep Evid:0001 | wc -m ";
    print(&prefix("pcrCountEvent"), "$cmdString\n");
    $result = `$cmdString`;
    print(&prefix("pcrCountEvent"), "pcrCountEvents = $result\n");
    return $result;
}


# ----------------------------------------------------------------------
sub pcrSubmitJobsA() {
    ($run, $lcevts) = @_;
    my $pcrFile = "nada";

    my $file = sprintf("$pcrDataDir/run%05d.$midfext", $run);
    my $cmdString = "";
    my $envString = "";

    # -- adapt in case of mu3e reservations
    # my $queue = "-p 'mu3e --reservation=mu3e'";
    my $queue = "-p mu3e";

    # -- rundir
    my $rundir = "$pcrBaseDir/slurm/jobs/anl/$run";
    if (-d $rundir) {
        # -- remove possibly pre-existing job directory
        system("/bin/rm -rf $pcrBaseDir/slurm/jobs/anl/old/$rundir");
        system("/bin/mv $rundir $pcrBaseDir/slurm/jobs/anl/old");
    }
    mkdir($rundir);
    # -- rootdir
    my $rootdir = "$pcrBaseDir/slurm/storage1/anl/$run";
    if (-d $rootdir) {
        # -- remove possibly pre-existing job directory
        system("/bin/mv $rootdir $pcrBaseDir/slurm/storage1/anl/old");
    }
    mkdir($rootdir);
    print(&prefix("pcrSubmitJobsA"), "pcrSubmitJobsA rundir = $rundir, rootdir = $rootdir, file = $file\n");

    my $cmdIniString = "cd $rundir && ";
    $cmdIniString .= "$pcrDir/../slurm/run $queue -t ../../../../$pcrTarFile -c $pcrDir/scripts/slurm-analyzer.csh ";

    # -- encode the configuration of the SLURM job
    $envString .= "'STORAGE1 $pcrBaseDir/slurm/storage1/anl";
    $envString .= "%PCRDATADIR $pcrDataDir";
    $envString .= "%MIDASFILE run$run.$midfext";
    $envString .= "%RUN $run";

    # map ($slurmID => logfile)
    my %mSlurmIds;
    my @mergeFiles;
    my $NJOBS = int($lcevts/$nevts) + 1;
    # -- submit jobs
    for ($ijob = 0; $ijob < $NJOBS; $ijob++) {
        last if ($ijob == 2);
        $job =  "$run" . "_$ijob";

        $rootString = "%ROOTFILE anl-run$job.root";

        $skipevts = $ijob * $nevts;
        if ($ijob < $NJOBS - 1) {
            $anlString  = "%ANLZR \"-s$skipevts -e$nevts\" '";
        } else {
            $anlString  = "%ANLZR \"-s$skipevts\" '";
        }

        $cmdString = $cmdIniString . "-r $envString$rootString$anlString " . "$job";

        print(&prefix("pcrSubmitJobsA"), "SLURM: STORAGE1 $pcrBaseDir/slurm/storage1/anl ROOTFILE anl-run$job.root $anlString\n");
        if ($opt_d) {
            print(&prefix("pcrSubmitJobsA DBX"), $cmdString);
        } else {
            $line = `$cmdString`;
            # -- to see $line, uncomment the next line:
            # print($line);

            my @lines = grep /\S/, split /\n/, $line;

            my $slurmid = 0, $slurmout = "nada", $rootout = "nada";
            foreach $ln (@lines) {
                if ($ln =~ /Submitted ->([0-9]*)<- with name \.*/) {
                    $slurmid = $1;
                }
                if ($ln =~ /batch submission: (\w*)/) {
                    $slurmout = $1;
                }
                if ($ln =~ /ROOTFILE/) {
                    ($rootout = $ln) =~ s/ROOTFILE //g;
                }
            }
            if ($slurmid > 0) {
                print(&prefix("pcrSubmitJobsA"), "SLURM job $slurmid -> $slurmout, rootout = $rootout\n");
                $mSlurmIds{$slurmid} =  "tmp-$job/$slurmout.slurm.log";
                push(@mergeFiles, $job);
            }
        }
    }

    my $njobs = keys %mSlurmIds;
    if ($njobs < 1) {
        print(&prefix("pcrSubmitJobsA"), "ERROR no slurm job finished, something went wrong?!\n");
        return $pcrFile;
    }

    my $slurmids = "(";
    my $cnt = 0;
    foreach $ele (keys %mSlurmIds) {
        $slurmids .= $ele;
        $cnt++;
        if ($cnt < $njobs) {$slurmids .= ", ";}
    }
    $slurmids .= ")";
    print(&prefix("pcrSubmitJobsA"), "slurmids = $slurmids, sleep 30 second before looking at logfiles\n");
    sleep(30);

    # -- monitor jobs
    while ($njobs > 0) {
        if ($njobs > 20) {
            sleep(60);
        } elsif ($njobs > 10) {
            sleep(30);
        } else {
            sleep(10);
        }
        foreach $sjob (keys %mSlurmIds) {
            $result = `/bin/squeue -j $sjob`;
            my @lines = grep /\S/, split /\n/, $result;
            my $le = @lines;
            my $tail = "no file yet\n";
            if (-e "$pcrBaseDir/slurm/jobs/anl/$run/$mSlurmIds{$sjob}") {
                $tail = `/bin/tail -1 $pcrBaseDir/slurm/jobs/anl/$run/$mSlurmIds{$sjob}`;
            }
            print("    [$sjob:$mSlurmIds{$sjob}] $tail");
            if ($tail =~ /This is the end, my friend/) {
                delete($mSlurmIds{$sjob});
                my $bla = $mSlurmIds{$sjob};
            }
            $njobs = keys %mSlurmIds;
        }
    }

    print(&prefix("pcrSubmitJobsA"), "all slurm jobs finished\n");

    $output = "$pcrBaseDir/slurm/storage1/anl";
    my @resultFiles = ("pixel_histos", "fibre_histos", "tile_histos");
    foreach $file (@resultFiles) {
        $pcrFile = "$output/$run/$file-run$run.root";
        system("/bin/rm -f $pcrFile");
        my $mergeString = "hadd $pcrFile";
        foreach $rf (@mergeFiles)  {
            $mergeString .= " $output/$run/root_output_files_$rf/$file$run.root ";
        }

        if ($opt_d) {
            print(&prefix("pcrSubmitJobsA DBX"), $mergeString);
        } else {
            print(&prefix("pcrSubmitJobsA"), $mergeString);
            my $result = `$mergeString`;
            print("$result\n");
            print(&prefix("pcrSubmitJobsA"), "merged root file: $pcrFile\n");
        }
    }
    return $pcrFile;
}

# ----------------------------------------------------------------------
sub pcrSubmitJobsB() {
    ($run, $lcevts) = @_;
    my $pcrFile = "nada";

    my $file = sprintf("$pcrDataDir/run%05d.$midfext", $run);
    my $cmdString = "";
    my $envString = "";

    # -- adapt in case of mu3e reservations
    # my $queue = "-p 'mu3e --reservation=mu3e'";
    my $queue = "-p mu3e";

    # -- rundir
    my $rundir = "$pcrBaseDir/slurm/jobs/rec/$run";
    if (-d $rundir) {
        # -- remove possibly pre-existing job directory
        system("/bin/mv $rundir $pcrBaseDir/slurm/jobs/rec/old");
    }
    mkdir($rundir);

    # -- rootdir already existing from calibration
    my $rootdir = "$pcrBaseDir/slurm/storage1/rec/$run";
    if (-d $rootdir) {
        # -- remove possibly pre-existing job directory
        system("/bin/mv $rootdir $pcrBaseDir/slurm/storage1/rec/old");
    }
    mkdir($rootdir);

    print(&prefix("pcrSubmitJobsB"), "pcrSubmitJobsB rundir = $rundir, rootdir = $rootdir, file = $file\n");

    my $cmdIniString = "cd $rundir && ";
    $cmdIniString .= "$pcrCodeDir/../slurm/run $queue -t ../../../$pcrTarFile -c $pcrCodeDir/scripts/slurm-trirec.csh ";

    # -- encode the configuration of the SLURM job
    $envString .= "'STORAGE1 $pcrBaseDir/slurm/storage1/rec";
    $envString .= "%PCRDATADIR $pcrDataDir";
    $envString .= "%MIDASFILE run$run.$midfext";
    $envString .= "%RUN $run";

    # map ($slurmID => logfile)
    my %mSlurmIds;
    my @mergeFiles;
    # FIXME
    my $lnevts = $nevts/10;
    my $NJOBS = int($lcevts/$lnevts) + 1;
    # -- submit jobs
    for ($ijob = 0; $ijob < $NJOBS; $ijob++) {
        $job =  "$run" . "_$ijob";

        $rootString = "%ROOTFILE trirec-run$job.root";

        $skipevts = $ijob * $lnevts;
        if ($ijob < $NJOBS - 1) {
            $anlString  = "%ANLZR \"-s $skipevts -n $lnevts\" '";
        } else {
            $anlString  = "%ANLZR \"-s $skipevts\" '";
        }

        $cmdString = $cmdIniString . "-r $envString$rootString$anlString " . "$job";

        print(&prefix("pcrSubmitJobsB"), "SLURM: STORAGE1 $pcrBaseDir/slurm/storage1 ROOTFILE trirec-run$job.root $anlString\n");
        $line = `$cmdString`;
        # -- to see $line, uncomment the next line:
        # print($line);

        my @lines = grep /\S/, split /\n/, $line;

        my $slurmid = 0, $slurmout = "nada", $rootout = "nada";
        foreach $ln (@lines) {
            if ($ln =~ /Submitted ->([0-9]*)<- with name \.*/) {
                $slurmid = $1;
            }
            if ($ln =~ /batch submission: (\w*)/) {
                $slurmout = $1;
            }
            if ($ln =~ /ROOTFILE/) {
                ($rootout = $ln) =~ s/ROOTFILE //g;
            }
        }
        if ($slurmid > 0) {
            print(&prefix("pcrSubmitJobsB"), "SLURM job $slurmid -> $slurmout\n");
            $mSlurmIds{$slurmid} =  "tmp-$job/$slurmout.slurm.log";
            push(@mergeFiles, $rootout);
        }
        # FIXME
        last;
    }

    my $njobs = keys %mSlurmIds;
    if ($njobs < 1) {
        print(&prefix("pcrSubmitJobsB"), "ERROR no slurm job finished, something went wrong?!\n");
        return $pcrFile;
    }

    my $slurmids = "(";
    my $cnt = 0;
    foreach $ele (keys %mSlurmIds) {
        $slurmids .= $ele;
        $cnt++;
        if ($cnt < $njobs) {$slurmids .= ", ";}
    }
    $slurmids .= ")";
    print(&prefix("pcrSubmitJobsB"), "slurmids = $slurmids, sleep 30 second before looking at logfiles\n");
    sleep(30);

    # -- monitor jobs
    while ($njobs > 0) {
        if ($njobs > 20) {
            sleep(60);
        } elsif ($njobs > 10) {
            sleep(30);
        } else {
            sleep(10);
        }
        foreach $sjob (keys %mSlurmIds) {
            $result = `/bin/squeue -j $sjob`;
            my @lines = grep /\S/, split /\n/, $result;
            my $le = @lines;
            my $tail = "no file yet\n";
            if (-e "$pcrBaseDir/slurm/jobs/rec/$run/$mSlurmIds{$sjob}") {
                $tail = `/bin/tail -1 $pcrBaseDir/slurm/jobs/rec/$run/$mSlurmIds{$sjob}`;
            }
            print("    [$sjob:$mSlurmIds{$sjob}] $tail");
            if ($tail =~ /This is the end, my friend/) {
                delete($mSlurmIds{$sjob});
                my $bla = $mSlurmIds{$sjob};
            }
            $njobs = keys %mSlurmIds;
        }
    }

    print(&prefix("pcrSubmitJobsB"), "all slurm jobs finished\n");

    $output = "$pcrBaseDir/slurm/storage1/rec";
    $pcrFile = "$pcrDataRecDir/mu3e_trirec_$run.root";
    system("/bin/rm -f $pcrFile");
    my $mergeString = "hadd $pcrFile";
    foreach $rf (@mergeFiles)  {
        $mergeString .= " $output/$run/$rf ";
    }

    my $result = `$mergeString`;
    print("$result\n");
    print(&prefix("pcrSubmitJobsB"), "merged root file: $pcrFile\n");
    return $pcrFile;
}


# ----------------------------------------------------------------------
sub pcrRunCalibration() {
    ($cfile) = @_;

    # -- pixelquality
    print(&prefix("pcrRunCalibration"), "cd $pcrCalCode && bin/pcrPixelQuality -g mcidealv5.1 -f $cfile -j $pcrJsonDir; cd - \n");
    system("cd $pcrCalCode && bin/pcrPixelQuality -g mcidealv5.1 -f $cfile -j $pcrJsonDir; cd - ");

    # -- update IOVs
    $cfile =~ /anl-run([0-9]*).root/;
    my $irun = int($1);
    my $plfile = `ls $pcrJsonDir/payloads/tag_pixelquality_*_iov_$irun`;
    chop($plfile);
    my($bplfile, $directories) = fileparse($plfile);
    $bplfile =~ /tag_([\w]*)_iov_[0-9]*/;
    my $ltag = $1;
    system("$pcrCodeDir/scripts/insertIovTag -j $pcrJsonDir -t $ltag -i $irun");
}


# ----------------------------------------------------------------------
sub readProcessedRuns() {
    open(IN, "$pcrBaseDir/proCalRec.runs") || die "proCalRec: Cannot open $pcrBaseDir/proCalRec.runs\n";
    while (<IN>) {
        chop;
        push(@processedRuns, $_);
    }
    close(IN);

    print(&prefix("readProcessedRuns"), "processed runs: ");
    if ($opt_d) {
        foreach $irun (@processedRuns) {
            print(" $irun");
        }
    } else {
        print(" $#processedRuns runs  (use -d to see full list)");
    }
    print("\n");
}



# ----------------------------------------------------------------------
sub prefix() {
    ($long) = @_;
    my $now = localtime;
    # -- fill up in case too short
    $long .= "                         ";
    $shorter = substr($long, 0, 15);
    return ($now . "/" . $shorter . "/ ");
}
